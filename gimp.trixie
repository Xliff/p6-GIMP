## Structures


# == /usr/include/glib-2.0/glib/gslist.h ==

class _GSList is repr('CStruct') is export {
	has Pointer                       $.data; # Typedef<gpointer>->«void*» data
	has _GSList                       $.next; # Typedef<GSList>->«_GSList»* next
}

# == /usr/include/glib-2.0/gobject/gtypemodule.h ==

class _GTypeModule is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has guint                         $.use_count; # Typedef<guint>->«unsigned int» use_count
	has _GSList                       $.type_infos; # Typedef<GSList>->«_GSList»* type_infos
	has _GSList                       $.interface_infos; # Typedef<GSList>->«_GSList»* interface_infos
	has Pointer[gchar]                $.name; # Typedef<gchar>->«char»* name
}
class _GTypeModuleClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.load; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* load
	has Pointer                       $.unload; # F:void ( )* unload
	has Pointer                       $.reserved1; # F:void ( )* reserved1
	has Pointer                       $.reserved2; # F:void ( )* reserved2
	has Pointer                       $.reserved3; # F:void ( )* reserved3
	has Pointer                       $.reserved4; # F:void ( )* reserved4
}

# == /usr/include/glib-2.0/gio/gthreadedsocketservice.h ==

class _GThreadedSocketServicePrivate is repr('CStruct') is export {
}
class _GThreadedSocketServiceClass is repr('CStruct') is export {
	has _GSocketServiceClass          $.parent_class; # Typedef<GSocketServiceClass>->«_GSocketServiceClass» parent_class
	has Pointer                       $.run; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* run
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}
class _GThreadedSocketService is repr('CStruct') is export {
	has _GSocketService               $.parent_instance; # Typedef<GSocketService>->«_GSocketService» parent_instance
	has _GThreadedSocketServicePrivate$.priv; # Typedef<GThreadedSocketServicePrivate>->«_GThreadedSocketServicePrivate»* priv
}

# == /usr/include/glib-2.0/glib/gtrashstack.h ==

class _GTrashStack is repr('CStruct') is export {
	has _GTrashStack                  $.next; # Typedef<GTrashStack>->«_GTrashStack»* next
}

# == /usr/include/glib-2.0/gio/gtlsbackend.h ==

class _GTlsBackend is repr('CStruct') is export {
}
class _GTlsBackendInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.supports_tls; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* supports_tls
	has Pointer                       $.get_certificate_type; # F:Typedef<GType>->«Typedef<gsize>->«long unsigned int»» ( )* get_certificate_type
	has Pointer                       $.get_client_connection_type; # F:Typedef<GType>->«Typedef<gsize>->«long unsigned int»» ( )* get_client_connection_type
	has Pointer                       $.get_server_connection_type; # F:Typedef<GType>->«Typedef<gsize>->«long unsigned int»» ( )* get_server_connection_type
	has Pointer                       $.get_file_database_type; # F:Typedef<GType>->«Typedef<gsize>->«long unsigned int»» ( )* get_file_database_type
	has Pointer                       $.get_default_database; # F:Typedef<GTlsDatabase>->«_GTlsDatabase»* ( )* get_default_database
	has Pointer                       $.supports_dtls; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* supports_dtls
	has Pointer                       $.get_dtls_client_connection_type; # F:Typedef<GType>->«Typedef<gsize>->«long unsigned int»» ( )* get_dtls_client_connection_type
	has Pointer                       $.get_dtls_server_connection_type; # F:Typedef<GType>->«Typedef<gsize>->«long unsigned int»» ( )* get_dtls_server_connection_type
}

# == /usr/include/glib-2.0/gio/gapplication.h ==

class _GApplicationPrivate is repr('CStruct') is export {
}
class _GApplication is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GApplicationPrivate          $.priv; # Typedef<GApplicationPrivate>->«_GApplicationPrivate»* priv
}
class _GApplicationClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.startup; # F:void ( )* startup
	has Pointer                       $.activate; # F:void ( )* activate
	has Pointer                       $.open; # F:void ( )* open
	has Pointer                       $.command_line; # F:int ( )* command_line
	has Pointer                       $.local_command_line; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* local_command_line
	has Pointer                       $.before_emit; # F:void ( )* before_emit
	has Pointer                       $.after_emit; # F:void ( )* after_emit
	has Pointer                       $.add_platform_data; # F:void ( )* add_platform_data
	has Pointer                       $.quit_mainloop; # F:void ( )* quit_mainloop
	has Pointer                       $.run_mainloop; # F:void ( )* run_mainloop
	has Pointer                       $.shutdown; # F:void ( )* shutdown
	has Pointer                       $.dbus_register; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* dbus_register
	has Pointer                       $.dbus_unregister; # F:void ( )* dbus_unregister
	has Pointer                       $.handle_local_options; # F:Typedef<gint>->«int» ( )* handle_local_options
	has Pointer                       $.name_lost; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* name_lost
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[7] padding
}

# == /usr/include/glib-2.0/gio/gdbusintrospection.h ==

class _GDBusAnnotationInfo is repr('CStruct') is export {
	has gint                          $.ref_count; # const Typedef<gint>->«int» ref_count
	has Pointer[gchar]                $.key; # Typedef<gchar>->«char»* key
	has Pointer[gchar]                $.value; # Typedef<gchar>->«char»* value
	has Pointer[_GDBusAnnotationInfo] $.annotations; # Typedef<GDBusAnnotationInfo>->«_GDBusAnnotationInfo»** annotations
}
class _GDBusArgInfo is repr('CStruct') is export {
	has gint                          $.ref_count; # const Typedef<gint>->«int» ref_count
	has Pointer[gchar]                $.name; # Typedef<gchar>->«char»* name
	has Pointer[gchar]                $.signature; # Typedef<gchar>->«char»* signature
	has Pointer[_GDBusAnnotationInfo] $.annotations; # Typedef<GDBusAnnotationInfo>->«_GDBusAnnotationInfo»** annotations
}
class _GDBusMethodInfo is repr('CStruct') is export {
	has gint                          $.ref_count; # const Typedef<gint>->«int» ref_count
	has Pointer[gchar]                $.name; # Typedef<gchar>->«char»* name
	has Pointer[_GDBusArgInfo]        $.in_args; # Typedef<GDBusArgInfo>->«_GDBusArgInfo»** in_args
	has Pointer[_GDBusArgInfo]        $.out_args; # Typedef<GDBusArgInfo>->«_GDBusArgInfo»** out_args
	has Pointer[_GDBusAnnotationInfo] $.annotations; # Typedef<GDBusAnnotationInfo>->«_GDBusAnnotationInfo»** annotations
}
class _GDBusSignalInfo is repr('CStruct') is export {
	has gint                          $.ref_count; # const Typedef<gint>->«int» ref_count
	has Pointer[gchar]                $.name; # Typedef<gchar>->«char»* name
	has Pointer[_GDBusArgInfo]        $.args; # Typedef<GDBusArgInfo>->«_GDBusArgInfo»** args
	has Pointer[_GDBusAnnotationInfo] $.annotations; # Typedef<GDBusAnnotationInfo>->«_GDBusAnnotationInfo»** annotations
}
class _GDBusPropertyInfo is repr('CStruct') is export {
	has gint                          $.ref_count; # const Typedef<gint>->«int» ref_count
	has Pointer[gchar]                $.name; # Typedef<gchar>->«char»* name
	has Pointer[gchar]                $.signature; # Typedef<gchar>->«char»* signature
	has int32                         $.flags; # Typedef<GDBusPropertyInfoFlags>->«GDBusPropertyInfoFlags» flags
	has Pointer[_GDBusAnnotationInfo] $.annotations; # Typedef<GDBusAnnotationInfo>->«_GDBusAnnotationInfo»** annotations
}
class _GDBusInterfaceInfo is repr('CStruct') is export {
	has gint                          $.ref_count; # const Typedef<gint>->«int» ref_count
	has Pointer[gchar]                $.name; # Typedef<gchar>->«char»* name
	has Pointer[_GDBusMethodInfo]     $.methods; # Typedef<GDBusMethodInfo>->«_GDBusMethodInfo»** methods
	has Pointer[_GDBusSignalInfo]     $.signals; # Typedef<GDBusSignalInfo>->«_GDBusSignalInfo»** signals
	has Pointer[_GDBusPropertyInfo]   $.properties; # Typedef<GDBusPropertyInfo>->«_GDBusPropertyInfo»** properties
	has Pointer[_GDBusAnnotationInfo] $.annotations; # Typedef<GDBusAnnotationInfo>->«_GDBusAnnotationInfo»** annotations
}
class _GDBusNodeInfo is repr('CStruct') is export {
	has gint                          $.ref_count; # const Typedef<gint>->«int» ref_count
	has Pointer[gchar]                $.path; # Typedef<gchar>->«char»* path
	has Pointer[_GDBusInterfaceInfo]  $.interfaces; # Typedef<GDBusInterfaceInfo>->«_GDBusInterfaceInfo»** interfaces
	has Pointer[_GDBusNodeInfo]       $.nodes; # Typedef<GDBusNodeInfo>->«_GDBusNodeInfo»** nodes
	has Pointer[_GDBusAnnotationInfo] $.annotations; # Typedef<GDBusAnnotationInfo>->«_GDBusAnnotationInfo»** annotations
}

# == /usr/include/glib-2.0/gobject/gparam.h ==

class _GParamSpecPool is repr('CStruct') is export {
}
class _GParamSpec is repr('CStruct') is export {
	has _GTypeInstance                $.g_type_instance; # Typedef<GTypeInstance>->«_GTypeInstance» g_type_instance
	has Pointer[gchar]                $.name; # const Typedef<gchar>->«char»* name
	has int32                         $.flags; # Typedef<GParamFlags>->«GParamFlags» flags
	has gsize                         $.value_type; # Typedef<GType>->«Typedef<gsize>->«long unsigned int»» value_type
	has gsize                         $.owner_type; # Typedef<GType>->«Typedef<gsize>->«long unsigned int»» owner_type
	has Pointer[gchar]                $._nick; # Typedef<gchar>->«char»* _nick
	has Pointer[gchar]                $._blurb; # Typedef<gchar>->«char»* _blurb
	has _GData                        $.qdata; # Typedef<GData>->«_GData»* qdata
	has guint                         $.ref_count; # Typedef<guint>->«unsigned int» ref_count
	has guint                         $.param_id; # Typedef<guint>->«unsigned int» param_id
}
class _GParamSpecClass is repr('CStruct') is export {
	has _GTypeClass                   $.g_type_class; # Typedef<GTypeClass>->«_GTypeClass» g_type_class
	has gsize                         $.value_type; # Typedef<GType>->«Typedef<gsize>->«long unsigned int»» value_type
	has Pointer                       $.finalize; # F:void ( )* finalize
	has Pointer                       $.value_set_default; # F:void ( )* value_set_default
	has Pointer                       $.value_validate; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* value_validate
	has Pointer                       $.values_cmp; # F:Typedef<gint>->«int» ( )* values_cmp
	has NYIRP6(Array with size)       $.dummy; # Typedef<gpointer>->«void*»[4] dummy
}
class _GParameter is repr('CStruct') is export {
	has Pointer[gchar]                $.name; # const Typedef<gchar>->«char»* name
	has _GValue                       $.value; # Typedef<GValue>->«_GValue» value
}
class _GParamSpecTypeInfo is repr('CStruct') is export {
	has guint16                       $.instance_size; # Typedef<guint16>->«short unsigned int» instance_size
	has guint16                       $.n_preallocs; # Typedef<guint16>->«short unsigned int» n_preallocs
	has Pointer                       $.instance_init; # F:void ( )* instance_init
	has gsize                         $.value_type; # Typedef<GType>->«Typedef<gsize>->«long unsigned int»» value_type
	has Pointer                       $.finalize; # F:void ( )* finalize
	has Pointer                       $.value_set_default; # F:void ( )* value_set_default
	has Pointer                       $.value_validate; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* value_validate
	has Pointer                       $.values_cmp; # F:Typedef<gint>->«int» ( )* values_cmp
}

# == /usr/include/glib-2.0/gio/gnetworkmonitor.h ==

class _GNetworkMonitorInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.network_changed; # F:void ( )* network_changed
	has Pointer                       $.can_reach; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_reach
	has Pointer                       $.can_reach_async; # F:void ( )* can_reach_async
	has Pointer                       $.can_reach_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_reach_finish
}

# == /usr/include/gimp-2.0/libgimpbase/gimpbasetypes.h ==

class _GimpValueArray is repr('CStruct') is export {
}
class _GimpMetadata is repr('CStruct') is export {
}
class _GimpEnumDesc is repr('CStruct') is export {
	has gint                          $.value; # Typedef<gint>->«int» value
	has Pointer[gchar]                $.value_desc; # const Typedef<gchar>->«char»* value_desc
	has Pointer[gchar]                $.value_help; # const Typedef<gchar>->«char»* value_help
}
class _GimpFlagsDesc is repr('CStruct') is export {
	has guint                         $.value; # Typedef<guint>->«unsigned int» value
	has Pointer[gchar]                $.value_desc; # const Typedef<gchar>->«char»* value_desc
	has Pointer[gchar]                $.value_help; # const Typedef<gchar>->«char»* value_help
}

# == /usr/include/glib-2.0/gio/gfileicon.h ==

class _GFileIconClass is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gfileinfo.h ==

class _GFileInfoClass is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gsocketconnection.h ==

class _GSocketConnectionPrivate is repr('CStruct') is export {
}
class _GSocketConnectionClass is repr('CStruct') is export {
	has _GIOStreamClass               $.parent_class; # Typedef<GIOStreamClass>->«_GIOStreamClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
	has Pointer                       $._g_reserved6; # F:void ( )* _g_reserved6
}
class _GSocketConnection is repr('CStruct') is export {
	has _GIOStream                    $.parent_instance; # Typedef<GIOStream>->«_GIOStream» parent_instance
	has _GSocketConnectionPrivate     $.priv; # Typedef<GSocketConnectionPrivate>->«_GSocketConnectionPrivate»* priv
}

# == /usr/include/glib-2.0/gio/gresolver.h ==

class _GResolverPrivate is repr('CStruct') is export {
}
class _GResolver is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GResolverPrivate             $.priv; # Typedef<GResolverPrivate>->«_GResolverPrivate»* priv
}
class _GResolverClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.reload; # F:void ( )* reload
	has Pointer                       $.lookup_by_name; # F:Typedef<GList>->«_GList»* ( )* lookup_by_name
	has Pointer                       $.lookup_by_name_async; # F:void ( )* lookup_by_name_async
	has Pointer                       $.lookup_by_name_finish; # F:Typedef<GList>->«_GList»* ( )* lookup_by_name_finish
	has Pointer                       $.lookup_by_address; # F:Typedef<gchar>->«char»* ( )* lookup_by_address
	has Pointer                       $.lookup_by_address_async; # F:void ( )* lookup_by_address_async
	has Pointer                       $.lookup_by_address_finish; # F:Typedef<gchar>->«char»* ( )* lookup_by_address_finish
	has Pointer                       $.lookup_service; # F:Typedef<GList>->«_GList»* ( )* lookup_service
	has Pointer                       $.lookup_service_async; # F:void ( )* lookup_service_async
	has Pointer                       $.lookup_service_finish; # F:Typedef<GList>->«_GList»* ( )* lookup_service_finish
	has Pointer                       $.lookup_records; # F:Typedef<GList>->«_GList»* ( )* lookup_records
	has Pointer                       $.lookup_records_async; # F:void ( )* lookup_records_async
	has Pointer                       $.lookup_records_finish; # F:Typedef<GList>->«_GList»* ( )* lookup_records_finish
	has Pointer                       $.lookup_by_name_with_flags_async; # F:void ( )* lookup_by_name_with_flags_async
	has Pointer                       $.lookup_by_name_with_flags_finish; # F:Typedef<GList>->«_GList»* ( )* lookup_by_name_with_flags_finish
	has Pointer                       $.lookup_by_name_with_flags; # F:Typedef<GList>->«_GList»* ( )* lookup_by_name_with_flags
}

# == /usr/include/glib-2.0/gio/gbufferedinputstream.h ==

class _GBufferedInputStreamPrivate is repr('CStruct') is export {
}
class _GBufferedInputStream is repr('CStruct') is export {
	has _GFilterInputStream           $.parent_instance; # Typedef<GFilterInputStream>->«_GFilterInputStream» parent_instance
	has _GBufferedInputStreamPrivate  $.priv; # Typedef<GBufferedInputStreamPrivate>->«_GBufferedInputStreamPrivate»* priv
}
class _GBufferedInputStreamClass is repr('CStruct') is export {
	has _GFilterInputStreamClass      $.parent_class; # Typedef<GFilterInputStreamClass>->«_GFilterInputStreamClass» parent_class
	has Pointer                       $.fill; # F:Typedef<gssize>->«long int» ( )* fill
	has Pointer                       $.fill_async; # F:void ( )* fill_async
	has Pointer                       $.fill_finish; # F:Typedef<gssize>->«long int» ( )* fill_finish
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/glib-2.0/gio/ginetaddressmask.h ==

class _GInetAddressMaskPrivate is repr('CStruct') is export {
}
class _GInetAddressMask is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GInetAddressMaskPrivate      $.priv; # Typedef<GInetAddressMaskPrivate>->«_GInetAddressMaskPrivate»* priv
}
class _GInetAddressMaskClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
}

# == /usr/include/glib-2.0/glib/gkeyfile.h ==

class _GKeyFile is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gdbusmenumodel.h ==

class _GDBusMenuModel is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/glib/gstring.h ==

class _GString is repr('CStruct') is export {
	has Pointer[gchar]                $.str; # Typedef<gchar>->«char»* str
	has gsize                         $.len; # Typedef<gsize>->«long unsigned int» len
	has gsize                         $.allocated_len; # Typedef<gsize>->«long unsigned int» allocated_len
}

# == /usr/include/glib-2.0/glib/gtestutils.h ==

class GTestCase is repr('CStruct') is export {
}
class GTestSuite is repr('CStruct') is export {
}

# == /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h ==

class _GdkPixbufLoader is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has Pointer                       $.priv; # Typedef<gpointer>->«void*» priv
}
class _GdkPixbufLoaderClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.size_prepared; # F:void ( )* size_prepared
	has Pointer                       $.area_prepared; # F:void ( )* area_prepared
	has Pointer                       $.area_updated; # F:void ( )* area_updated
	has Pointer                       $.closed; # F:void ( )* closed
}

# == /usr/include/gimp-2.0/libgimp/gimppixelrgn.h ==

class _GimpPixelRgn is repr('CStruct') is export {
	has Pointer[guchar]               $.data; # Typedef<guchar>->«unsigned char»* data
	has _GimpDrawable                 $.drawable; # Typedef<GimpDrawable>->«_GimpDrawable»* drawable
	has gint                          $.bpp; # Typedef<gint>->«int» bpp
	has gint                          $.rowstride; # Typedef<gint>->«int» rowstride
	has gint                          $.x; # Typedef<gint>->«int» x
	has gint                          $.y; # Typedef<gint>->«int» y
	has gint                          $.w; # Typedef<gint>->«int» w
	has gint                          $.h; # Typedef<gint>->«int» h
	has guint                         $.dirty; # Typedef<guint>->«unsigned int» dirty
	has guint                         $.shadow; # Typedef<guint>->«unsigned int» shadow
	has gint                          $.process_count; # Typedef<gint>->«int» process_count
}

# == /usr/include/glib-2.0/gio/gseekable.h ==

class _GSeekableIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.tell; # F:Typedef<goffset>->«Typedef<gint64>->«long int»» ( )* tell
	has Pointer                       $.can_seek; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_seek
	has Pointer                       $.seek; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* seek
	has Pointer                       $.can_truncate; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_truncate
	has Pointer                       $.truncate_fn; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* truncate_fn
}

# == /usr/include/glib-2.0/gio/gloadableicon.h ==

class _GLoadableIconIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.load; # F:Typedef<GInputStream>->«_GInputStream»* ( )* load
	has Pointer                       $.load_async; # F:void ( )* load_async
	has Pointer                       $.load_finish; # F:Typedef<GInputStream>->«_GInputStream»* ( )* load_finish
}

# == /usr/include/glib-2.0/gio/gzlibdecompressor.h ==

class _GZlibDecompressorClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
}

# == /usr/include/glib-2.0/gio/gdbusinterface.h ==

class _GDBusInterfaceIface is repr('CStruct') is export {
	has _GTypeInterface               $.parent_iface; # Typedef<GTypeInterface>->«_GTypeInterface» parent_iface
	has Pointer                       $.get_info; # F:Typedef<GDBusInterfaceInfo>->«_GDBusInterfaceInfo»* ( )* get_info
	has Pointer                       $.get_object; # F:Typedef<GDBusObject>->«_GDBusObject»* ( )* get_object
	has Pointer                       $.set_object; # F:void ( )* set_object
	has Pointer                       $.dup_object; # F:Typedef<GDBusObject>->«_GDBusObject»* ( )* dup_object
}

# == /usr/include/glib-2.0/gobject/gvaluearray.h ==

class _GValueArray is repr('CStruct') is export {
	has guint                         $.n_values; # Typedef<guint>->«unsigned int» n_values
	has _GValue                       $.values; # Typedef<GValue>->«_GValue»* values
	has guint                         $.n_prealloced; # Typedef<guint>->«unsigned int» n_prealloced
}

# == /usr/include/glib-2.0/glib/garray.h ==

class _GBytes is repr('CStruct') is export {
}
class _GArray is repr('CStruct') is export {
	has Pointer[gchar]                $.data; # Typedef<gchar>->«char»* data
	has guint                         $.len; # Typedef<guint>->«unsigned int» len
}
class _GByteArray is repr('CStruct') is export {
	has Pointer[guint8]               $.data; # Typedef<guint8>->«unsigned char»* data
	has guint                         $.len; # Typedef<guint>->«unsigned int» len
}
class _GPtrArray is repr('CStruct') is export {
	has Pointer[Pointer]              $.pdata; # Typedef<gpointer>->«void*»* pdata
	has guint                         $.len; # Typedef<guint>->«unsigned int» len
}

# == /usr/include/glib-2.0/gio/gactionmap.h ==

class _GActionMapInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.lookup_action; # F:Typedef<GAction>->«_GAction»* ( )* lookup_action
	has Pointer                       $.add_action; # F:void ( )* add_action
	has Pointer                       $.remove_action; # F:void ( )* remove_action
}
class _GActionEntry is repr('CStruct') is export {
	has Pointer[gchar]                $.name; # const Typedef<gchar>->«char»* name
	has Pointer                       $.activate; # F:void ( )* activate
	has Pointer[gchar]                $.parameter_type; # const Typedef<gchar>->«char»* parameter_type
	has Pointer[gchar]                $.state; # const Typedef<gchar>->«char»* state
	has Pointer                       $.change_state; # F:void ( )* change_state
	has NYIRP6(Array with size)       $.padding; # Typedef<gsize>->«long unsigned int»[3] padding
}

# == /usr/include/glib-2.0/gio/gdbusobjectproxy.h ==

class _GDBusObjectProxyPrivate is repr('CStruct') is export {
}
class _GDBusObjectProxy is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GDBusObjectProxyPrivate      $.priv; # Typedef<GDBusObjectProxyPrivate>->«_GDBusObjectProxyPrivate»* priv
}
class _GDBusObjectProxyClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[8] padding
}

# == /usr/include/glib-2.0/gio/gcancellable.h ==

class _GCancellablePrivate is repr('CStruct') is export {
}
class _GCancellable is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GCancellablePrivate          $.priv; # Typedef<GCancellablePrivate>->«_GCancellablePrivate»* priv
}
class _GCancellableClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.cancelled; # F:void ( )* cancelled
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/glib-2.0/glib/gpattern.h ==

class _GPatternSpec is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gtlsserverconnection.h ==

class _GTlsServerConnectionInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
}

# == /usr/include/gegl-0.4/gegl-buffer.h ==

class _GeglTileBackend is repr('CStruct') is export {
}
class _GeglBuffer is repr('CStruct') is export {
}
class _GeglSampler is repr('CStruct') is export {
}
class _GeglRectangle is repr('CStruct') is export {
	has gint                          $.x; # Typedef<gint>->«int» x
	has gint                          $.y; # Typedef<gint>->«int» y
	has gint                          $.width; # Typedef<gint>->«int» width
	has gint                          $.height; # Typedef<gint>->«int» height
}

# == /usr/include/glib-2.0/gio/gasyncresult.h ==

class _GAsyncResultIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.get_user_data; # F:Typedef<gpointer>->«void*» ( )* get_user_data
	has Pointer                       $.get_source_object; # F:Typedef<GObject>->«_GObject»* ( )* get_source_object
	has Pointer                       $.is_tagged; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* is_tagged
}

# == /usr/include/cairo/cairo.h ==

class _cairo is repr('CStruct') is export {
}
class _cairo_surface is repr('CStruct') is export {
}
class _cairo_device is repr('CStruct') is export {
}
class _cairo_matrix is repr('CStruct') is export {
	has num64                         $.xx; # double xx
	has num64                         $.yx; # double yx
	has num64                         $.xy; # double xy
	has num64                         $.yy; # double yy
	has num64                         $.x0; # double x0
	has num64                         $.y0; # double y0
}
class _cairo_pattern is repr('CStruct') is export {
}
class _cairo_user_data_key is repr('CStruct') is export {
	has int32                         $.unused; # int unused
}
class _cairo_rectangle_int is repr('CStruct') is export {
	has int32                         $.x; # int x
	has int32                         $.y; # int y
	has int32                         $.width; # int width
	has int32                         $.height; # int height
}
class _cairo_rectangle is repr('CStruct') is export {
	has num64                         $.x; # double x
	has num64                         $.y; # double y
	has num64                         $.width; # double width
	has num64                         $.height; # double height
}
class _cairo_rectangle_list is repr('CStruct') is export {
	has int32                         $.status; # Typedef<cairo_status_t>->«_cairo_status» status
	has _cairo_rectangle              $.rectangles; # Typedef<cairo_rectangle_t>->«_cairo_rectangle»* rectangles
	has int32                         $.num_rectangles; # int num_rectangles
}
class _cairo_scaled_font is repr('CStruct') is export {
}
class _cairo_font_face is repr('CStruct') is export {
}
class _cairo_font_options is repr('CStruct') is export {
}
class _cairo_path_data_t is repr('CUnion') is export {
	HAS                               $.header; #  header
	HAS                               $.point; #  point
}
class cairo_path is repr('CStruct') is export {
	has int32                         $.status; # Typedef<cairo_status_t>->«_cairo_status» status
	has Pointer[_cairo_path_data_t]   $.data; # Typedef<cairo_path_data_t>->«Union»* data
	has int32                         $.num_data; # int num_data
}
class _cairo_region is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gmemoryinputstream.h ==

class _GMemoryInputStreamPrivate is repr('CStruct') is export {
}
class _GMemoryInputStream is repr('CStruct') is export {
	has _GInputStream                 $.parent_instance; # Typedef<GInputStream>->«_GInputStream» parent_instance
	has _GMemoryInputStreamPrivate    $.priv; # Typedef<GMemoryInputStreamPrivate>->«_GMemoryInputStreamPrivate»* priv
}
class _GMemoryInputStreamClass is repr('CStruct') is export {
	has _GInputStreamClass            $.parent_class; # Typedef<GInputStreamClass>->«_GInputStreamClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/glib-2.0/gio/gproxyaddress.h ==

class _GProxyAddressPrivate is repr('CStruct') is export {
}
class _GProxyAddress is repr('CStruct') is export {
	has _GInetSocketAddress           $.parent_instance; # Typedef<GInetSocketAddress>->«_GInetSocketAddress» parent_instance
	has _GProxyAddressPrivate         $.priv; # Typedef<GProxyAddressPrivate>->«_GProxyAddressPrivate»* priv
}
class _GProxyAddressClass is repr('CStruct') is export {
	has _GInetSocketAddressClass      $.parent_class; # Typedef<GInetSocketAddressClass>->«_GInetSocketAddressClass» parent_class
}

# == /usr/include/glib-2.0/glib/gconvert.h ==

class _GIConv is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/glib/gmain.h ==

class _GMainContext is repr('CStruct') is export {
}
class _GMainLoop is repr('CStruct') is export {
}
class _GSourcePrivate is repr('CStruct') is export {
}
class _GSource is repr('CStruct') is export {
	has Pointer                       $.callback_data; # Typedef<gpointer>->«void*» callback_data
	has _GSourceCallbackFuncs         $.callback_funcs; # Typedef<GSourceCallbackFuncs>->«_GSourceCallbackFuncs»* callback_funcs
	has _GSourceFuncs                 $.source_funcs; # const Typedef<GSourceFuncs>->«_GSourceFuncs»* source_funcs
	has guint                         $.ref_count; # Typedef<guint>->«unsigned int» ref_count
	has _GMainContext                 $.context; # Typedef<GMainContext>->«_GMainContext»* context
	has gint                          $.priority; # Typedef<gint>->«int» priority
	has guint                         $.flags; # Typedef<guint>->«unsigned int» flags
	has guint                         $.source_id; # Typedef<guint>->«unsigned int» source_id
	has _GSList                       $.poll_fds; # Typedef<GSList>->«_GSList»* poll_fds
	has _GSource                      $.prev; # Typedef<GSource>->«_GSource»* prev
	has _GSource                      $.next; # Typedef<GSource>->«_GSource»* next
	has Str                           $.name; # char* name
	has _GSourcePrivate               $.priv; # Typedef<GSourcePrivate>->«_GSourcePrivate»* priv
}
class _GSourceCallbackFuncs is repr('CStruct') is export {
	has Pointer                       $.ref; # F:void ( )* ref
	has Pointer                       $.unref; # F:void ( )* unref
	has Pointer                       $.get; # F:void ( )* get
}
class _GSourceFuncs is repr('CStruct') is export {
	has Pointer                       $.prepare; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* prepare
	has Pointer                       $.check; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* check
	has Pointer                       $.dispatch; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* dispatch
	has Pointer                       $.finalize; # F:void ( )* finalize
	has Pointer                       $.closure_callback; # Typedef<GSourceFunc>->«F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )*» closure_callback
	has Pointer                       $.closure_marshal; # Typedef<GSourceDummyMarshal>->«F:void ( )*» closure_marshal
}

# == /usr/include/glib-2.0/glib/ghash.h ==

class _GHashTable is repr('CStruct') is export {
}
class _GHashTableIter is repr('CStruct') is export {
	has Pointer                       $.dummy1; # Typedef<gpointer>->«void*» dummy1
	has Pointer                       $.dummy2; # Typedef<gpointer>->«void*» dummy2
	has Pointer                       $.dummy3; # Typedef<gpointer>->«void*» dummy3
	has int32                         $.dummy4; # int dummy4
	has gint                          $.dummy5; # Typedef<gboolean>->«Typedef<gint>->«int»» dummy5
	has Pointer                       $.dummy6; # Typedef<gpointer>->«void*» dummy6
}

# == /usr/include/glib-2.0/gio/gtlsconnection.h ==

class _GTlsConnectionPrivate is repr('CStruct') is export {
}
class _GTlsConnection is repr('CStruct') is export {
	has _GIOStream                    $.parent_instance; # Typedef<GIOStream>->«_GIOStream» parent_instance
	has _GTlsConnectionPrivate        $.priv; # Typedef<GTlsConnectionPrivate>->«_GTlsConnectionPrivate»* priv
}
class _GTlsConnectionClass is repr('CStruct') is export {
	has _GIOStreamClass               $.parent_class; # Typedef<GIOStreamClass>->«_GIOStreamClass» parent_class
	has Pointer                       $.accept_certificate; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* accept_certificate
	has Pointer                       $.handshake; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* handshake
	has Pointer                       $.handshake_async; # F:void ( )* handshake_async
	has Pointer                       $.handshake_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* handshake_finish
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[8] padding
}

# == /usr/include/glib-2.0/gio/gicon.h ==

class _GIconIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.hash; # F:Typedef<guint>->«unsigned int» ( )* hash
	has Pointer                       $.equal; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* equal
	has Pointer                       $.to_tokens; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* to_tokens
	has Pointer                       $.from_tokens; # F:Typedef<GIcon>->«_GIcon»* ( )* from_tokens
	has Pointer                       $.serialize; # F:Typedef<GVariant>->«_GVariant»* ( )* serialize
}

# == /usr/include/glib-2.0/gio/gdbusobjectskeleton.h ==

class _GDBusObjectSkeletonPrivate is repr('CStruct') is export {
}
class _GDBusObjectSkeleton is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GDBusObjectSkeletonPrivate   $.priv; # Typedef<GDBusObjectSkeletonPrivate>->«_GDBusObjectSkeletonPrivate»* priv
}
class _GDBusObjectSkeletonClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.authorize_method; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* authorize_method
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[8] padding
}

# == /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h ==

class _GDBusInterfaceSkeletonPrivate is repr('CStruct') is export {
}
class _GDBusInterfaceSkeleton is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GDBusInterfaceSkeletonPrivate$.priv; # Typedef<GDBusInterfaceSkeletonPrivate>->«_GDBusInterfaceSkeletonPrivate»* priv
}
class _GDBusInterfaceSkeletonClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.get_info; # F:Typedef<GDBusInterfaceInfo>->«_GDBusInterfaceInfo»* ( )* get_info
	has Pointer                       $.get_vtable; # F:Typedef<GDBusInterfaceVTable>->«_GDBusInterfaceVTable»* ( )* get_vtable
	has Pointer                       $.get_properties; # F:Typedef<GVariant>->«_GVariant»* ( )* get_properties
	has Pointer                       $.flush; # F:void ( )* flush
	has NYIRP6(Array with size)       $.vfunc_padding; # Typedef<gpointer>->«void*»[8] vfunc_padding
	has Pointer                       $.g_authorize_method; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* g_authorize_method
	has NYIRP6(Array with size)       $.signal_padding; # Typedef<gpointer>->«void*»[8] signal_padding
}

# == /usr/include/glib-2.0/gio/gsimpleactiongroup.h ==

class _GSimpleActionGroupPrivate is repr('CStruct') is export {
}
class _GSimpleActionGroup is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GSimpleActionGroupPrivate    $.priv; # Typedef<GSimpleActionGroupPrivate>->«_GSimpleActionGroupPrivate»* priv
}
class _GSimpleActionGroupClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[12] padding
}

# == /usr/include/glib-2.0/gio/gremoteactiongroup.h ==

class _GRemoteActionGroupInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.activate_action_full; # F:void ( )* activate_action_full
	has Pointer                       $.change_action_state_full; # F:void ( )* change_action_state_full
}

# == /usr/include/glib-2.0/glib/gmessages.h ==

class _GLogField is repr('CStruct') is export {
	has Pointer[gchar]                $.key; # const Typedef<gchar>->«char»* key
	has Pointer                       $.value; # Typedef<gconstpointer>->«const void*» value
	has gssize                        $.length; # Typedef<gssize>->«long int» length
}

# == /usr/include/glib-2.0/glib/deprecated/gallocator.h ==

class _GAllocator is repr('CStruct') is export {
}
class _GMemChunk is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gpollableinputstream.h ==

class _GPollableInputStreamInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.can_poll; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_poll
	has Pointer                       $.is_readable; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* is_readable
	has Pointer                       $.create_source; # F:Typedef<GSource>->«_GSource»* ( )* create_source
	has Pointer                       $.read_nonblocking; # F:Typedef<gssize>->«long int» ( )* read_nonblocking
}

# == /usr/include/glib-2.0/gio/gdtlsconnection.h ==

class _GDtlsConnectionInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.accept_certificate; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* accept_certificate
	has Pointer                       $.handshake; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* handshake
	has Pointer                       $.handshake_async; # F:void ( )* handshake_async
	has Pointer                       $.handshake_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* handshake_finish
	has Pointer                       $.shutdown; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* shutdown
	has Pointer                       $.shutdown_async; # F:void ( )* shutdown_async
	has Pointer                       $.shutdown_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* shutdown_finish
	has Pointer                       $.set_advertised_protocols; # F:void ( )* set_advertised_protocols
	has Pointer                       $.get_negotiated_protocol; # F:const Typedef<gchar>->«char»* ( )* get_negotiated_protocol
}

# == /usr/include/glib-2.0/gio/giomodule.h ==

class _GIOModuleScope is repr('CStruct') is export {
}
class _GIOModuleClass is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/glib/deprecated/gcache.h ==

class _GCache is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gnativesocketaddress.h ==

class _GNativeSocketAddressPrivate is repr('CStruct') is export {
}
class _GNativeSocketAddress is repr('CStruct') is export {
	has _GSocketAddress               $.parent_instance; # Typedef<GSocketAddress>->«_GSocketAddress» parent_instance
	has _GNativeSocketAddressPrivate  $.priv; # Typedef<GNativeSocketAddressPrivate>->«_GNativeSocketAddressPrivate»* priv
}
class _GNativeSocketAddressClass is repr('CStruct') is export {
	has _GSocketAddressClass          $.parent_class; # Typedef<GSocketAddressClass>->«_GSocketAddressClass» parent_class
}

# == /usr/include/glib-2.0/gio/gthemedicon.h ==

class _GThemedIconClass is repr('CStruct') is export {
}

# == /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h ==

class _GdkPixbufAnimation is repr('CStruct') is export {
}
class _GdkPixbufAnimationIter is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gvolume.h ==

class _GVolumeIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.changed; # F:void ( )* changed
	has Pointer                       $.removed; # F:void ( )* removed
	has Pointer                       $.get_name; # F:char* ( )* get_name
	has Pointer                       $.get_icon; # F:Typedef<GIcon>->«_GIcon»* ( )* get_icon
	has Pointer                       $.get_uuid; # F:char* ( )* get_uuid
	has Pointer                       $.get_drive; # F:Typedef<GDrive>->«_GDrive»* ( )* get_drive
	has Pointer                       $.get_mount; # F:Typedef<GMount>->«_GMount»* ( )* get_mount
	has Pointer                       $.can_mount; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_mount
	has Pointer                       $.can_eject; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_eject
	has Pointer                       $.mount_fn; # F:void ( )* mount_fn
	has Pointer                       $.mount_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* mount_finish
	has Pointer                       $.eject; # F:void ( )* eject
	has Pointer                       $.eject_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* eject_finish
	has Pointer                       $.get_identifier; # F:char* ( )* get_identifier
	has Pointer                       $.enumerate_identifiers; # F:char** ( )* enumerate_identifiers
	has Pointer                       $.should_automount; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* should_automount
	has Pointer                       $.get_activation_root; # F:Typedef<GFile>->«_GFile»* ( )* get_activation_root
	has Pointer                       $.eject_with_operation; # F:void ( )* eject_with_operation
	has Pointer                       $.eject_with_operation_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* eject_with_operation_finish
	has Pointer                       $.get_sort_key; # F:const Typedef<gchar>->«char»* ( )* get_sort_key
	has Pointer                       $.get_symbolic_icon; # F:Typedef<GIcon>->«_GIcon»* ( )* get_symbolic_icon
}

# == /usr/include/glib-2.0/gio/ginputstream.h ==

class _GInputStreamPrivate is repr('CStruct') is export {
}
class _GInputStream is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GInputStreamPrivate          $.priv; # Typedef<GInputStreamPrivate>->«_GInputStreamPrivate»* priv
}
class _GInputStreamClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.read_fn; # F:Typedef<gssize>->«long int» ( )* read_fn
	has Pointer                       $.skip; # F:Typedef<gssize>->«long int» ( )* skip
	has Pointer                       $.close_fn; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* close_fn
	has Pointer                       $.read_async; # F:void ( )* read_async
	has Pointer                       $.read_finish; # F:Typedef<gssize>->«long int» ( )* read_finish
	has Pointer                       $.skip_async; # F:void ( )* skip_async
	has Pointer                       $.skip_finish; # F:Typedef<gssize>->«long int» ( )* skip_finish
	has Pointer                       $.close_async; # F:void ( )* close_async
	has Pointer                       $.close_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* close_finish
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/glib-2.0/gio/gcredentials.h ==

class _GCredentialsClass is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gvolumemonitor.h ==

class _GVolumeMonitor is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has Pointer                       $.priv; # Typedef<gpointer>->«void*» priv
}
class _GVolumeMonitorClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.volume_added; # F:void ( )* volume_added
	has Pointer                       $.volume_removed; # F:void ( )* volume_removed
	has Pointer                       $.volume_changed; # F:void ( )* volume_changed
	has Pointer                       $.mount_added; # F:void ( )* mount_added
	has Pointer                       $.mount_removed; # F:void ( )* mount_removed
	has Pointer                       $.mount_pre_unmount; # F:void ( )* mount_pre_unmount
	has Pointer                       $.mount_changed; # F:void ( )* mount_changed
	has Pointer                       $.drive_connected; # F:void ( )* drive_connected
	has Pointer                       $.drive_disconnected; # F:void ( )* drive_disconnected
	has Pointer                       $.drive_changed; # F:void ( )* drive_changed
	has Pointer                       $.is_supported; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* is_supported
	has Pointer                       $.get_connected_drives; # F:Typedef<GList>->«_GList»* ( )* get_connected_drives
	has Pointer                       $.get_volumes; # F:Typedef<GList>->«_GList»* ( )* get_volumes
	has Pointer                       $.get_mounts; # F:Typedef<GList>->«_GList»* ( )* get_mounts
	has Pointer                       $.get_volume_for_uuid; # F:Typedef<GVolume>->«_GVolume»* ( )* get_volume_for_uuid
	has Pointer                       $.get_mount_for_uuid; # F:Typedef<GMount>->«_GMount»* ( )* get_mount_for_uuid
	has Pointer                       $.adopt_orphan_mount; # F:Typedef<GVolume>->«_GVolume»* ( )* adopt_orphan_mount
	has Pointer                       $.drive_eject_button; # F:void ( )* drive_eject_button
	has Pointer                       $.drive_stop_button; # F:void ( )* drive_stop_button
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
	has Pointer                       $._g_reserved6; # F:void ( )* _g_reserved6
}

# == /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h ==

class _GDBusObjectManagerServerPrivate is repr('CStruct') is export {
}
class _GDBusObjectManagerServer is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GDBusObjectManagerServerPrivate$.priv; # Typedef<GDBusObjectManagerServerPrivate>->«_GDBusObjectManagerServerPrivate»* priv
}
class _GDBusObjectManagerServerClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[8] padding
}

# == /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h ==

class _GdkPixbuf is repr('CStruct') is export {
}

# == /usr/include/gimp-2.0/libgimp/gimpdrawable.h ==

class _GimpDrawable is repr('CStruct') is export {
	has gint32                        $.drawable_id; # Typedef<gint32>->«int» drawable_id
	has guint                         $.width; # Typedef<guint>->«unsigned int» width
	has guint                         $.height; # Typedef<guint>->«unsigned int» height
	has guint                         $.bpp; # Typedef<guint>->«unsigned int» bpp
	has guint                         $.ntile_rows; # Typedef<guint>->«unsigned int» ntile_rows
	has guint                         $.ntile_cols; # Typedef<guint>->«unsigned int» ntile_cols
	has _GimpTile                     $.tiles; # Typedef<GimpTile>->«_GimpTile»* tiles
	has _GimpTile                     $.shadow_tiles; # Typedef<GimpTile>->«_GimpTile»* shadow_tiles
}

# == /usr/include/glib-2.0/gio/gtlsfiledatabase.h ==

class _GTlsFileDatabaseInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[8] padding
}

# == /usr/include/glib-2.0/glib/gnode.h ==

class _GNode is repr('CStruct') is export {
	has Pointer                       $.data; # Typedef<gpointer>->«void*» data
	has _GNode                        $.next; # Typedef<GNode>->«_GNode»* next
	has _GNode                        $.prev; # Typedef<GNode>->«_GNode»* prev
	has _GNode                        $.parent; # Typedef<GNode>->«_GNode»* parent
	has _GNode                        $.children; # Typedef<GNode>->«_GNode»* children
}

# == /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h ==

class _GdkPixbufSimpleAnim is repr('CStruct') is export {
}
class _GdkPixbufSimpleAnimClass is repr('CStruct') is export {
}

# == /usr/include/gimp-2.0/libgimpconfig/gimpcolorconfig.h ==

class _GimpColorConfig is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has int32                         $.mode; # Typedef<GimpColorManagementMode>->«GimpColorManagementMode» mode
	has Pointer[gchar]                $.rgb_profile; # Typedef<gchar>->«char»* rgb_profile
	has Pointer[gchar]                $.cmyk_profile; # Typedef<gchar>->«char»* cmyk_profile
	has Pointer[gchar]                $.display_profile; # Typedef<gchar>->«char»* display_profile
	has gint                          $.display_profile_from_gdk; # Typedef<gboolean>->«Typedef<gint>->«int»» display_profile_from_gdk
	has Pointer[gchar]                $.printer_profile; # Typedef<gchar>->«char»* printer_profile
	has int32                         $.display_intent; # Typedef<GimpColorRenderingIntent>->«GimpColorRenderingIntent» display_intent
	has int32                         $.simulation_intent; # Typedef<GimpColorRenderingIntent>->«GimpColorRenderingIntent» simulation_intent
	has Pointer[gchar]                $.display_module; # Typedef<gchar>->«char»* display_module
	has gint                          $.simulation_gamut_check; # Typedef<gboolean>->«Typedef<gint>->«int»» simulation_gamut_check
	has _GimpRGB                      $.out_of_gamut_color; # Typedef<GimpRGB>->«_GimpRGB» out_of_gamut_color
	has gint                          $.display_use_black_point_compensation; # Typedef<gboolean>->«Typedef<gint>->«int»» display_use_black_point_compensation
	has gint                          $.simulation_use_black_point_compensation; # Typedef<gboolean>->«Typedef<gint>->«int»» simulation_use_black_point_compensation
	has Pointer[gchar]                $.gray_profile; # Typedef<gchar>->«char»* gray_profile
	has Pointer                       $._gimp_reserved3; # F:void ( )* _gimp_reserved3
	has Pointer                       $._gimp_reserved4; # F:void ( )* _gimp_reserved4
	has Pointer                       $._gimp_reserved5; # F:void ( )* _gimp_reserved5
	has Pointer                       $._gimp_reserved6; # F:void ( )* _gimp_reserved6
	has Pointer                       $._gimp_reserved7; # F:void ( )* _gimp_reserved7
	has Pointer                       $._gimp_reserved8; # F:void ( )* _gimp_reserved8
}
class _GimpColorConfigClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
}

# == /usr/include/glib-2.0/gio/gfilenamecompleter.h ==

class _GFilenameCompleterClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.got_completion_data; # F:void ( )* got_completion_data
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
}

# == /usr/include/glib-2.0/gio/gnetworkservice.h ==

class _GNetworkServicePrivate is repr('CStruct') is export {
}
class _GNetworkService is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GNetworkServicePrivate       $.priv; # Typedef<GNetworkServicePrivate>->«_GNetworkServicePrivate»* priv
}
class _GNetworkServiceClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
}

# == /usr/include/glib-2.0/gio/gmenu.h ==

class _GMenuItem is repr('CStruct') is export {
}
class _GMenu is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/glib/deprecated/grel.h ==

class _GRelation is repr('CStruct') is export {
}
class _GTuples is repr('CStruct') is export {
	has guint                         $.len; # Typedef<guint>->«unsigned int» len
}

# == /usr/include/gimp-2.0/libgimpcolor/gimpcolorprofile.h ==

class _GimpColorProfilePrivate is repr('CStruct') is export {
}
class _GimpColorProfile is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GimpColorProfilePrivate      $.priv; # Typedef<GimpColorProfilePrivate>->«_GimpColorProfilePrivate»* priv
}
class _GimpColorProfileClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $._gimp_reserved1; # F:void ( )* _gimp_reserved1
	has Pointer                       $._gimp_reserved2; # F:void ( )* _gimp_reserved2
	has Pointer                       $._gimp_reserved3; # F:void ( )* _gimp_reserved3
	has Pointer                       $._gimp_reserved4; # F:void ( )* _gimp_reserved4
}

# == /usr/include/glib-2.0/glib/gtree.h ==

class _GTree is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gdataoutputstream.h ==

class _GDataOutputStreamPrivate is repr('CStruct') is export {
}
class _GDataOutputStream is repr('CStruct') is export {
	has _GFilterOutputStream          $.parent_instance; # Typedef<GFilterOutputStream>->«_GFilterOutputStream» parent_instance
	has _GDataOutputStreamPrivate     $.priv; # Typedef<GDataOutputStreamPrivate>->«_GDataOutputStreamPrivate»* priv
}
class _GDataOutputStreamClass is repr('CStruct') is export {
	has _GFilterOutputStreamClass     $.parent_class; # Typedef<GFilterOutputStreamClass>->«_GFilterOutputStreamClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/glib-2.0/glib/gpoll.h ==

class _GPollFD is repr('CStruct') is export {
	has gint                          $.fd; # Typedef<gint>->«int» fd
	has gushort                       $.events; # Typedef<gushort>->«short unsigned int» events
	has gushort                       $.revents; # Typedef<gushort>->«short unsigned int» revents
}

# == /usr/include/gimp-2.0/libgimp/gimpregioniterator.h ==

class _GimpRgnIterator is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gtask.h ==

class _GTaskClass is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gmount.h ==

class _GMountIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.changed; # F:void ( )* changed
	has Pointer                       $.unmounted; # F:void ( )* unmounted
	has Pointer                       $.get_root; # F:Typedef<GFile>->«_GFile»* ( )* get_root
	has Pointer                       $.get_name; # F:char* ( )* get_name
	has Pointer                       $.get_icon; # F:Typedef<GIcon>->«_GIcon»* ( )* get_icon
	has Pointer                       $.get_uuid; # F:char* ( )* get_uuid
	has Pointer                       $.get_volume; # F:Typedef<GVolume>->«_GVolume»* ( )* get_volume
	has Pointer                       $.get_drive; # F:Typedef<GDrive>->«_GDrive»* ( )* get_drive
	has Pointer                       $.can_unmount; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_unmount
	has Pointer                       $.can_eject; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_eject
	has Pointer                       $.unmount; # F:void ( )* unmount
	has Pointer                       $.unmount_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* unmount_finish
	has Pointer                       $.eject; # F:void ( )* eject
	has Pointer                       $.eject_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* eject_finish
	has Pointer                       $.remount; # F:void ( )* remount
	has Pointer                       $.remount_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* remount_finish
	has Pointer                       $.guess_content_type; # F:void ( )* guess_content_type
	has Pointer                       $.guess_content_type_finish; # F:Typedef<gchar>->«char»** ( )* guess_content_type_finish
	has Pointer                       $.guess_content_type_sync; # F:Typedef<gchar>->«char»** ( )* guess_content_type_sync
	has Pointer                       $.pre_unmount; # F:void ( )* pre_unmount
	has Pointer                       $.unmount_with_operation; # F:void ( )* unmount_with_operation
	has Pointer                       $.unmount_with_operation_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* unmount_with_operation_finish
	has Pointer                       $.eject_with_operation; # F:void ( )* eject_with_operation
	has Pointer                       $.eject_with_operation_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* eject_with_operation_finish
	has Pointer                       $.get_default_location; # F:Typedef<GFile>->«_GFile»* ( )* get_default_location
	has Pointer                       $.get_sort_key; # F:const Typedef<gchar>->«char»* ( )* get_sort_key
	has Pointer                       $.get_symbolic_icon; # F:Typedef<GIcon>->«_GIcon»* ( )* get_symbolic_icon
}

# == /usr/include/gimp-2.0/libgimp/gimptile.h ==

class _GimpTile is repr('CStruct') is export {
	has guint                         $.ewidth; # Typedef<guint>->«unsigned int» ewidth
	has guint                         $.eheight; # Typedef<guint>->«unsigned int» eheight
	has guint                         $.bpp; # Typedef<guint>->«unsigned int» bpp
	has guint                         $.tile_num; # Typedef<guint>->«unsigned int» tile_num
	has guint16                       $.ref_count; # Typedef<guint16>->«short unsigned int» ref_count
	has guint                         $.dirty; # Typedef<guint>->«unsigned int» dirty
	has guint                         $.shadow; # Typedef<guint>->«unsigned int» shadow
	has Pointer[guchar]               $.data; # Typedef<guchar>->«unsigned char»* data
	has _GimpDrawable                 $.drawable; # Typedef<GimpDrawable>->«_GimpDrawable»* drawable
}

# == /usr/include/gimp-2.0/libgimp/gimp.h ==

class _GimpPlugInInfo is repr('CStruct') is export {
	has Pointer                       $.init_proc; # Typedef<GimpInitProc>->«F:void ( )*» init_proc
	has Pointer                       $.quit_proc; # Typedef<GimpQuitProc>->«F:void ( )*» quit_proc
	has Pointer                       $.query_proc; # Typedef<GimpQueryProc>->«F:void ( )*» query_proc
	has Pointer                       $.run_proc; # Typedef<GimpRunProc>->«F:void ( )*» run_proc
}
class _GimpParamDef is repr('CStruct') is export {
	has int32                         $.type; # Typedef<GimpPDBArgType>->«GimpPDBArgType» type
	has Pointer[gchar]                $.name; # Typedef<gchar>->«char»* name
	has Pointer[gchar]                $.description; # Typedef<gchar>->«char»* description
}
class _GimpParamRegion is repr('CStruct') is export {
	has gint32                        $.x; # Typedef<gint32>->«int» x
	has gint32                        $.y; # Typedef<gint32>->«int» y
	has gint32                        $.width; # Typedef<gint32>->«int» width
	has gint32                        $.height; # Typedef<gint32>->«int» height
}
class _GimpParamData is repr('CUnion') is export {
	has gint32                        $.d_int32; # Typedef<gint32>->«int» d_int32
	has gint16                        $.d_int16; # Typedef<gint16>->«short int» d_int16
	has guint8                        $.d_int8; # Typedef<guint8>->«unsigned char» d_int8
	has gdouble                       $.d_float; # Typedef<gdouble>->«double» d_float
	has Pointer[gchar]                $.d_string; # Typedef<gchar>->«char»* d_string
	has Pointer[gint32]               $.d_int32array; # Typedef<gint32>->«int»* d_int32array
	has Pointer[gint16]               $.d_int16array; # Typedef<gint16>->«short int»* d_int16array
	has Pointer[guint8]               $.d_int8array; # Typedef<guint8>->«unsigned char»* d_int8array
	has Pointer[gdouble]              $.d_floatarray; # Typedef<gdouble>->«double»* d_floatarray
	has Pointer[Pointer[gchar]]       $.d_stringarray; # Typedef<gchar>->«char»** d_stringarray
	has _GimpRGB                      $.d_colorarray; # Typedef<GimpRGB>->«_GimpRGB»* d_colorarray
	has _GimpRGB                      $.d_color; # Typedef<GimpRGB>->«_GimpRGB» d_color
	has _GimpParamRegion              $.d_region; # Typedef<GimpParamRegion>->«_GimpParamRegion» d_region
	has gint32                        $.d_display; # Typedef<gint32>->«int» d_display
	has gint32                        $.d_image; # Typedef<gint32>->«int» d_image
	has gint32                        $.d_item; # Typedef<gint32>->«int» d_item
	has gint32                        $.d_layer; # Typedef<gint32>->«int» d_layer
	has gint32                        $.d_layer_mask; # Typedef<gint32>->«int» d_layer_mask
	has gint32                        $.d_channel; # Typedef<gint32>->«int» d_channel
	has gint32                        $.d_drawable; # Typedef<gint32>->«int» d_drawable
	has gint32                        $.d_selection; # Typedef<gint32>->«int» d_selection
	has gint32                        $.d_boundary; # Typedef<gint32>->«int» d_boundary
	has gint32                        $.d_path; # Typedef<gint32>->«int» d_path
	has gint32                        $.d_vectors; # Typedef<gint32>->«int» d_vectors
	has gint32                        $.d_unit; # Typedef<gint32>->«int» d_unit
	has _GimpParasite                 $.d_parasite; # Typedef<GimpParasite>->«_GimpParasite» d_parasite
	has gint32                        $.d_tattoo; # Typedef<gint32>->«int» d_tattoo
	has int32                         $.d_status; # Typedef<GimpPDBStatusType>->«GimpPDBStatusType» d_status
}
class _GimpParam is repr('CStruct') is export {
	has int32                         $.type; # Typedef<GimpPDBArgType>->«GimpPDBArgType» type
	has _GimpParamData                $.data; # Typedef<GimpParamData>->«Union» data
}

# == /usr/include/glib-2.0/gio/gdbusproxy.h ==

class _GDBusProxyPrivate is repr('CStruct') is export {
}
class _GDBusProxy is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GDBusProxyPrivate            $.priv; # Typedef<GDBusProxyPrivate>->«_GDBusProxyPrivate»* priv
}
class _GDBusProxyClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.g_properties_changed; # F:void ( )* g_properties_changed
	has Pointer                       $.g_signal; # F:void ( )* g_signal
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[32] padding
}

# == /usr/include/glib-2.0/glib/gthreadpool.h ==

class _GThreadPool is repr('CStruct') is export {
	has Pointer                       $.func; # Typedef<GFunc>->«F:void ( )*» func
	has Pointer                       $.user_data; # Typedef<gpointer>->«void*» user_data
	has gint                          $.exclusive; # Typedef<gboolean>->«Typedef<gint>->«int»» exclusive
}

# == /usr/include/glib-2.0/gio/gactiongroup.h ==

class _GActionGroupInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.has_action; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* has_action
	has Pointer                       $.list_actions; # F:Typedef<gchar>->«char»** ( )* list_actions
	has Pointer                       $.get_action_enabled; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* get_action_enabled
	has Pointer                       $.get_action_parameter_type; # F:const Typedef<GVariantType>->«_GVariantType»* ( )* get_action_parameter_type
	has Pointer                       $.get_action_state_type; # F:const Typedef<GVariantType>->«_GVariantType»* ( )* get_action_state_type
	has Pointer                       $.get_action_state_hint; # F:Typedef<GVariant>->«_GVariant»* ( )* get_action_state_hint
	has Pointer                       $.get_action_state; # F:Typedef<GVariant>->«_GVariant»* ( )* get_action_state
	has Pointer                       $.change_action_state; # F:void ( )* change_action_state
	has Pointer                       $.activate_action; # F:void ( )* activate_action
	has Pointer                       $.action_added; # F:void ( )* action_added
	has Pointer                       $.action_removed; # F:void ( )* action_removed
	has Pointer                       $.action_enabled_changed; # F:void ( )* action_enabled_changed
	has Pointer                       $.action_state_changed; # F:void ( )* action_state_changed
	has Pointer                       $.query_action; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* query_action
}

# == /usr/include/glib-2.0/glib/deprecated/gcompletion.h ==

class _GCompletion is repr('CStruct') is export {
	has _GList                        $.items; # Typedef<GList>->«_GList»* items
	has Pointer                       $.func; # Typedef<GCompletionFunc>->«F:Typedef<gchar>->«char»* ( )*» func
	has Pointer[gchar]                $.prefix; # Typedef<gchar>->«char»* prefix
	has _GList                        $.cache; # Typedef<GList>->«_GList»* cache
	has Pointer                       $.strncmp_func; # Typedef<GCompletionStrncmpFunc>->«F:Typedef<gint>->«int» ( )*» strncmp_func
}

# == /usr/include/gimp-2.0/libgimpconfig/gimpconfigtypes.h ==

class _GimpConfig is repr('CStruct') is export {
}
class _GimpConfigWriter is repr('CStruct') is export {
}

# == /usr/include/gegl-0.4/gegl-curve.h ==

class _GeglCurve is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
}
class _GeglCurveClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
}

# == /usr/include/glib-2.0/glib/gthread.h ==

class _GMutex is repr('CUnion') is export {
	has Pointer                       $.p; # Typedef<gpointer>->«void*» p
	has NYIRP6(Array with size)       $.i; # Typedef<guint>->«unsigned int»[2] i
}
class _GRWLock is repr('CStruct') is export {
	has Pointer                       $.p; # Typedef<gpointer>->«void*» p
	has NYIRP6(Array with size)       $.i; # Typedef<guint>->«unsigned int»[2] i
}
class _GCond is repr('CStruct') is export {
	has Pointer                       $.p; # Typedef<gpointer>->«void*» p
	has NYIRP6(Array with size)       $.i; # Typedef<guint>->«unsigned int»[2] i
}
class _GRecMutex is repr('CStruct') is export {
	has Pointer                       $.p; # Typedef<gpointer>->«void*» p
	has NYIRP6(Array with size)       $.i; # Typedef<guint>->«unsigned int»[2] i
}
class _GPrivate is repr('CStruct') is export {
	has Pointer                       $.p; # Typedef<gpointer>->«void*» p
	has Pointer                       $.notify; # Typedef<GDestroyNotify>->«F:void ( )*» notify
	has NYIRP6(Array with size)       $.future; # Typedef<gpointer>->«void*»[2] future
}
class _GOnce is repr('CStruct') is export {
	has int32                         $.status; # const Typedef<GOnceStatus>->«GOnceStatus» status
	has Pointer                       $.retval; # const Typedef<gpointer>->«void*» retval
}

# == /usr/include/glib-2.0/gio/gtlspassword.h ==

class _GTlsPasswordPrivate is repr('CStruct') is export {
}
class _GTlsPassword is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GTlsPasswordPrivate          $.priv; # Typedef<GTlsPasswordPrivate>->«_GTlsPasswordPrivate»* priv
}
class _GTlsPasswordClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.get_value; # F:const Typedef<guchar>->«unsigned char»* ( )* get_value
	has Pointer                       $.set_value; # F:void ( )* set_value
	has Pointer                       $.get_default_warning; # F:const Typedef<gchar>->«char»* ( )* get_default_warning
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[4] padding
}

# == /usr/include/glib-2.0/glib/gqueue.h ==

class _GQueue is repr('CStruct') is export {
	has _GList                        $.head; # Typedef<GList>->«_GList»* head
	has _GList                        $.tail; # Typedef<GList>->«_GList»* tail
	has guint                         $.length; # Typedef<guint>->«unsigned int» length
}

# == /usr/include/glib-2.0/gio/giotypes.h ==

class _GAppInfo is repr('CStruct') is export {
}
class _GAsyncResult is repr('CStruct') is export {
}
class _GAsyncInitable is repr('CStruct') is export {
}
class _GCharsetConverter is repr('CStruct') is export {
}
class _GConverter is repr('CStruct') is export {
}
class _GDatagramBased is repr('CStruct') is export {
}
class _GSimplePermission is repr('CStruct') is export {
}
class _GZlibCompressor is repr('CStruct') is export {
}
class _GZlibDecompressor is repr('CStruct') is export {
}
class _GRemoteActionGroup is repr('CStruct') is export {
}
class _GDBusActionGroup is repr('CStruct') is export {
}
class _GActionMap is repr('CStruct') is export {
}
class _GActionGroup is repr('CStruct') is export {
}
class _GPropertyAction is repr('CStruct') is export {
}
class _GSimpleAction is repr('CStruct') is export {
}
class _GAction is repr('CStruct') is export {
}
class _GSettingsBackend is repr('CStruct') is export {
}
class _GNotification is repr('CStruct') is export {
}
class _GDrive is repr('CStruct') is export {
}
class _GFile is repr('CStruct') is export {
}
class _GFileInfo is repr('CStruct') is export {
}
class _GFileAttributeMatcher is repr('CStruct') is export {
}
class _GFileDescriptorBased is repr('CStruct') is export {
}
class _GFileIcon is repr('CStruct') is export {
}
class _GFilenameCompleter is repr('CStruct') is export {
}
class _GIcon is repr('CStruct') is export {
}
class _GInitable is repr('CStruct') is export {
}
class _GIOModule is repr('CStruct') is export {
}
class _GIOExtensionPoint is repr('CStruct') is export {
}
class _GIOExtension is repr('CStruct') is export {
}
class _GIOSchedulerJob is repr('CStruct') is export {
}
class _GIOStreamAdapter is repr('CStruct') is export {
}
class _GLoadableIcon is repr('CStruct') is export {
}
class _GBytesIcon is repr('CStruct') is export {
}
class _GMount is repr('CStruct') is export {
}
class _GNetworkMonitor is repr('CStruct') is export {
}
class _GSimpleIOStream is repr('CStruct') is export {
}
class _GPollableInputStream is repr('CStruct') is export {
}
class _GPollableOutputStream is repr('CStruct') is export {
}
class _GResource is repr('CStruct') is export {
}
class _GSeekable is repr('CStruct') is export {
}
class _GSimpleAsyncResult is repr('CStruct') is export {
}
class _GSocketConnectable is repr('CStruct') is export {
}
class _GSrvTarget is repr('CStruct') is export {
}
class _GTask is repr('CStruct') is export {
}
class _GDtlsConnection is repr('CStruct') is export {
}
class _GDtlsClientConnection is repr('CStruct') is export {
}
class _GDtlsServerConnection is repr('CStruct') is export {
}
class _GThemedIcon is repr('CStruct') is export {
}
class _GTlsClientConnection is repr('CStruct') is export {
}
class _GTlsFileDatabase is repr('CStruct') is export {
}
class _GTlsServerConnection is repr('CStruct') is export {
}
class _GProxyResolver is repr('CStruct') is export {
}
class _GProxy is repr('CStruct') is export {
}
class _GVolume is repr('CStruct') is export {
}
class _GInputVector is repr('CStruct') is export {
	has Pointer                       $.buffer; # Typedef<gpointer>->«void*» buffer
	has gsize                         $.size; # Typedef<gsize>->«long unsigned int» size
}
class _GInputMessage is repr('CStruct') is export {
	has Pointer[_GSocketAddress]      $.address; # Typedef<GSocketAddress>->«_GSocketAddress»** address
	has _GInputVector                 $.vectors; # Typedef<GInputVector>->«_GInputVector»* vectors
	has guint                         $.num_vectors; # Typedef<guint>->«unsigned int» num_vectors
	has gsize                         $.bytes_received; # Typedef<gsize>->«long unsigned int» bytes_received
	has gint                          $.flags; # Typedef<gint>->«int» flags
	has Pointer[Pointer[_GSocketControlMessage]]$.control_messages; # Typedef<GSocketControlMessage>->«_GSocketControlMessage»*** control_messages
	has Pointer[guint]                $.num_control_messages; # Typedef<guint>->«unsigned int»* num_control_messages
}
class _GOutputVector is repr('CStruct') is export {
	has Pointer                       $.buffer; # Typedef<gconstpointer>->«const void*» buffer
	has gsize                         $.size; # Typedef<gsize>->«long unsigned int» size
}
class _GOutputMessage is repr('CStruct') is export {
	has _GSocketAddress               $.address; # Typedef<GSocketAddress>->«_GSocketAddress»* address
	has _GOutputVector                $.vectors; # Typedef<GOutputVector>->«_GOutputVector»* vectors
	has guint                         $.num_vectors; # Typedef<guint>->«unsigned int» num_vectors
	has guint                         $.bytes_sent; # Typedef<guint>->«unsigned int» bytes_sent
	has Pointer[_GSocketControlMessage]$.control_messages; # Typedef<GSocketControlMessage>->«_GSocketControlMessage»** control_messages
	has guint                         $.num_control_messages; # Typedef<guint>->«unsigned int» num_control_messages
}
class _GCredentials is repr('CStruct') is export {
}
class _GUnixCredentialsMessage is repr('CStruct') is export {
}
class _GUnixFDList is repr('CStruct') is export {
}
class _GDBusMessage is repr('CStruct') is export {
}
class _GDBusConnection is repr('CStruct') is export {
}
class _GDBusMethodInvocation is repr('CStruct') is export {
}
class _GDBusServer is repr('CStruct') is export {
}
class _GDBusAuthObserver is repr('CStruct') is export {
}
class _GDBusInterface is repr('CStruct') is export {
}
class _GDBusObject is repr('CStruct') is export {
}
class _GDBusObjectManager is repr('CStruct') is export {
}
class _GTestDBus is repr('CStruct') is export {
}
class _GSubprocess is repr('CStruct') is export {
}
class _GSubprocessLauncher is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gmemoryoutputstream.h ==

class _GMemoryOutputStreamPrivate is repr('CStruct') is export {
}
class _GMemoryOutputStream is repr('CStruct') is export {
	has _GOutputStream                $.parent_instance; # Typedef<GOutputStream>->«_GOutputStream» parent_instance
	has _GMemoryOutputStreamPrivate   $.priv; # Typedef<GMemoryOutputStreamPrivate>->«_GMemoryOutputStreamPrivate»* priv
}
class _GMemoryOutputStreamClass is repr('CStruct') is export {
	has _GOutputStreamClass           $.parent_class; # Typedef<GOutputStreamClass>->«_GOutputStreamClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/glib-2.0/glib/gdatetime.h ==

class _GDateTime is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/glib/gstringchunk.h ==

class _GStringChunk is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gfileinputstream.h ==

class _GFileInputStreamPrivate is repr('CStruct') is export {
}
class _GFileInputStream is repr('CStruct') is export {
	has _GInputStream                 $.parent_instance; # Typedef<GInputStream>->«_GInputStream» parent_instance
	has _GFileInputStreamPrivate      $.priv; # Typedef<GFileInputStreamPrivate>->«_GFileInputStreamPrivate»* priv
}
class _GFileInputStreamClass is repr('CStruct') is export {
	has _GInputStreamClass            $.parent_class; # Typedef<GInputStreamClass>->«_GInputStreamClass» parent_class
	has Pointer                       $.tell; # F:Typedef<goffset>->«Typedef<gint64>->«long int»» ( )* tell
	has Pointer                       $.can_seek; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_seek
	has Pointer                       $.seek; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* seek
	has Pointer                       $.query_info; # F:Typedef<GFileInfo>->«_GFileInfo»* ( )* query_info
	has Pointer                       $.query_info_async; # F:void ( )* query_info_async
	has Pointer                       $.query_info_finish; # F:Typedef<GFileInfo>->«_GFileInfo»* ( )* query_info_finish
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/glib-2.0/glib/gutils.h ==

class _GDebugKey is repr('CStruct') is export {
	has Pointer[gchar]                $.key; # const Typedef<gchar>->«char»* key
	has guint                         $.value; # Typedef<guint>->«unsigned int» value
}

# == /usr/include/gegl-0.4/gegl-path.h ==

class _GeglPathClass is repr('CStruct') is export {
}
class _GeglPath is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
}
class GeglPathPoint is repr('CStruct') is export {
	has gfloat                        $.x; # Typedef<gfloat>->«float» x
	has gfloat                        $.y; # Typedef<gfloat>->«float» y
}
class GeglPathItem is repr('CStruct') is export {
	has gchar                         $.type; # Typedef<gchar>->«char» type
	has NYIRP6(Array with size)       $.point; # Typedef<GeglPathPoint>->«GeglPathPoint»[4] point
}
class GeglPathList is repr('CStruct') is export {
	has GeglPathList                  $.next; # GeglPathList* next
	has GeglPathItem                  $.d; # Typedef<GeglPathItem>->«GeglPathItem» d
}

# == /usr/include/glib-2.0/gio/gtcpconnection.h ==

class _GTcpConnectionPrivate is repr('CStruct') is export {
}
class _GTcpConnectionClass is repr('CStruct') is export {
	has _GSocketConnectionClass       $.parent_class; # Typedef<GSocketConnectionClass>->«_GSocketConnectionClass» parent_class
}
class _GTcpConnection is repr('CStruct') is export {
	has _GSocketConnection            $.parent_instance; # Typedef<GSocketConnection>->«_GSocketConnection» parent_instance
	has _GTcpConnectionPrivate        $.priv; # Typedef<GTcpConnectionPrivate>->«_GTcpConnectionPrivate»* priv
}

# == /usr/include/glib-2.0/gio/gpollableoutputstream.h ==

class _GPollableOutputStreamInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.can_poll; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_poll
	has Pointer                       $.is_writable; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* is_writable
	has Pointer                       $.create_source; # F:Typedef<GSource>->«_GSource»* ( )* create_source
	has Pointer                       $.write_nonblocking; # F:Typedef<gssize>->«long int» ( )* write_nonblocking
	has Pointer                       $.writev_nonblocking; # F:Typedef<GPollableReturn>->«GPollableReturn» ( )* writev_nonblocking
}

# == /usr/include/glib-2.0/glib/gregex.h ==

class _GRegex is repr('CStruct') is export {
}
class _GMatchInfo is repr('CStruct') is export {
}

# == /usr/include/gimp-2.0/libgimp/gimppixelfetcher.h ==

class _GimpPixelFetcher is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/glib/gvarianttype.h ==

class _GVariantType is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gsocketcontrolmessage.h ==

class _GSocketControlMessagePrivate is repr('CStruct') is export {
}
class _GSocketControlMessageClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.get_size; # F:Typedef<gsize>->«long unsigned int» ( )* get_size
	has Pointer                       $.get_level; # F:int ( )* get_level
	has Pointer                       $.get_type; # F:int ( )* get_type
	has Pointer                       $.serialize; # F:void ( )* serialize
	has Pointer                       $.deserialize; # F:Typedef<GSocketControlMessage>->«_GSocketControlMessage»* ( )* deserialize
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}
class _GSocketControlMessage is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GSocketControlMessagePrivate $.priv; # Typedef<GSocketControlMessagePrivate>->«_GSocketControlMessagePrivate»* priv
}

# == /usr/include/glib-2.0/gio/ginetsocketaddress.h ==

class _GInetSocketAddressPrivate is repr('CStruct') is export {
}
class _GInetSocketAddress is repr('CStruct') is export {
	has _GSocketAddress               $.parent_instance; # Typedef<GSocketAddress>->«_GSocketAddress» parent_instance
	has _GInetSocketAddressPrivate    $.priv; # Typedef<GInetSocketAddressPrivate>->«_GInetSocketAddressPrivate»* priv
}
class _GInetSocketAddressClass is repr('CStruct') is export {
	has _GSocketAddressClass          $.parent_class; # Typedef<GSocketAddressClass>->«_GSocketAddressClass» parent_class
}

# == /usr/include/glib-2.0/glib/gbookmarkfile.h ==

class _GBookmarkFile is repr('CStruct') is export {
}

# == &lt;builtin&gt; ==

class __va_list_tag is repr('CStruct') is export {
	has uint32                        $.gp_offset; # unsigned int gp_offset
	has uint32                        $.fp_offset; # unsigned int fp_offset
	has Pointer                       $.overflow_arg_area; # void* overflow_arg_area
	has Pointer                       $.reg_save_area; # void* reg_save_area
}
class __NSConstantString_tag is repr('CStruct') is export {
	has Pointer[int32]                $.isa; # const int* isa
	has int32                         $.flags; # int flags
	has Str                           $.str; # const char* str
	has long                          $.length; # long int length
}

# == /usr/include/glib-2.0/gio/gemblem.h ==

class _GEmblem is repr('CStruct') is export {
}
class _GEmblemClass is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gmountoperation.h ==

class _GMountOperationPrivate is repr('CStruct') is export {
}
class _GMountOperation is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GMountOperationPrivate       $.priv; # Typedef<GMountOperationPrivate>->«_GMountOperationPrivate»* priv
}
class _GMountOperationClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.ask_password; # F:void ( )* ask_password
	has Pointer                       $.ask_question; # F:void ( )* ask_question
	has Pointer                       $.reply; # F:void ( )* reply
	has Pointer                       $.aborted; # F:void ( )* aborted
	has Pointer                       $.show_processes; # F:void ( )* show_processes
	has Pointer                       $.show_unmount_progress; # F:void ( )* show_unmount_progress
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
	has Pointer                       $._g_reserved6; # F:void ( )* _g_reserved6
	has Pointer                       $._g_reserved7; # F:void ( )* _g_reserved7
	has Pointer                       $._g_reserved8; # F:void ( )* _g_reserved8
	has Pointer                       $._g_reserved9; # F:void ( )* _g_reserved9
}

# == /usr/include/glib-2.0/glib/goption.h ==

class _GOptionContext is repr('CStruct') is export {
}
class _GOptionGroup is repr('CStruct') is export {
}
class _GOptionEntry is repr('CStruct') is export {
	has Pointer[gchar]                $.long_name; # const Typedef<gchar>->«char»* long_name
	has gchar                         $.short_name; # Typedef<gchar>->«char» short_name
	has gint                          $.flags; # Typedef<gint>->«int» flags
	has int32                         $.arg; # Typedef<GOptionArg>->«GOptionArg» arg
	has Pointer                       $.arg_data; # Typedef<gpointer>->«void*» arg_data
	has Pointer[gchar]                $.description; # const Typedef<gchar>->«char»* description
	has Pointer[gchar]                $.arg_description; # const Typedef<gchar>->«char»* arg_description
}

# == /usr/include/glib-2.0/glib/gmarkup.h ==

class _GMarkupParseContext is repr('CStruct') is export {
}
class _GMarkupParser is repr('CStruct') is export {
	has Pointer                       $.start_element; # F:void ( )* start_element
	has Pointer                       $.end_element; # F:void ( )* end_element
	has Pointer                       $.text; # F:void ( )* text
	has Pointer                       $.passthrough; # F:void ( )* passthrough
	has Pointer                       $.error; # F:void ( )* error
}

# == /usr/include/gegl-0.4/gegl-types.h ==

class _GeglConfig is repr('CStruct') is export {
}
class _GeglStats is repr('CStruct') is export {
}
class _GeglAudioFragment is repr('CStruct') is export {
}
class _GeglOperationContext is repr('CStruct') is export {
}
class _GeglOperation is repr('CStruct') is export {
}
class _GeglNode is repr('CStruct') is export {
}
class _GeglProcessor is repr('CStruct') is export {
}
class _GeglRandom is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/glib/gmappedfile.h ==

class _GMappedFile is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gresource.h ==

class _GStaticResource is repr('CStruct') is export {
	has Pointer[guint8]               $.data; # const Typedef<guint8>->«unsigned char»* data
	has gsize                         $.data_len; # Typedef<gsize>->«long unsigned int» data_len
	has _GResource                    $.resource; # Typedef<GResource>->«_GResource»* resource
	has _GStaticResource              $.next; # Typedef<GStaticResource>->«_GStaticResource»* next
	has Pointer                       $.padding; # Typedef<gpointer>->«void*» padding
}

# == /usr/include/glib-2.0/glib/ghook.h ==

class _GHookList is repr('CStruct') is export {
	has gulong                        $.seq_id; # Typedef<gulong>->«long unsigned int» seq_id
	has guint                         $.hook_size; # Typedef<guint>->«unsigned int» hook_size
	has guint                         $.is_setup; # Typedef<guint>->«unsigned int» is_setup
	has _GHook                        $.hooks; # Typedef<GHook>->«_GHook»* hooks
	has Pointer                       $.dummy3; # Typedef<gpointer>->«void*» dummy3
	has Pointer                       $.finalize_hook; # Typedef<GHookFinalizeFunc>->«F:void ( )*» finalize_hook
	has NYIRP6(Array with size)       $.dummy; # Typedef<gpointer>->«void*»[2] dummy
}
class _GHook is repr('CStruct') is export {
	has Pointer                       $.data; # Typedef<gpointer>->«void*» data
	has _GHook                        $.next; # Typedef<GHook>->«_GHook»* next
	has _GHook                        $.prev; # Typedef<GHook>->«_GHook»* prev
	has guint                         $.ref_count; # Typedef<guint>->«unsigned int» ref_count
	has gulong                        $.hook_id; # Typedef<gulong>->«long unsigned int» hook_id
	has guint                         $.flags; # Typedef<guint>->«unsigned int» flags
	has Pointer                       $.func; # Typedef<gpointer>->«void*» func
	has Pointer                       $.destroy; # Typedef<GDestroyNotify>->«F:void ( )*» destroy
}

# == /usr/include/glib-2.0/gio/gsimpleproxyresolver.h ==

class _GSimpleProxyResolverPrivate is repr('CStruct') is export {
}
class _GSimpleProxyResolver is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GSimpleProxyResolverPrivate  $.priv; # Typedef<GSimpleProxyResolverPrivate>->«_GSimpleProxyResolverPrivate»* priv
}
class _GSimpleProxyResolverClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/glib-2.0/gio/gfileoutputstream.h ==

class _GFileOutputStreamPrivate is repr('CStruct') is export {
}
class _GFileOutputStream is repr('CStruct') is export {
	has _GOutputStream                $.parent_instance; # Typedef<GOutputStream>->«_GOutputStream» parent_instance
	has _GFileOutputStreamPrivate     $.priv; # Typedef<GFileOutputStreamPrivate>->«_GFileOutputStreamPrivate»* priv
}
class _GFileOutputStreamClass is repr('CStruct') is export {
	has _GOutputStreamClass           $.parent_class; # Typedef<GOutputStreamClass>->«_GOutputStreamClass» parent_class
	has Pointer                       $.tell; # F:Typedef<goffset>->«Typedef<gint64>->«long int»» ( )* tell
	has Pointer                       $.can_seek; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_seek
	has Pointer                       $.seek; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* seek
	has Pointer                       $.can_truncate; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_truncate
	has Pointer                       $.truncate_fn; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* truncate_fn
	has Pointer                       $.query_info; # F:Typedef<GFileInfo>->«_GFileInfo»* ( )* query_info
	has Pointer                       $.query_info_async; # F:void ( )* query_info_async
	has Pointer                       $.query_info_finish; # F:Typedef<GFileInfo>->«_GFileInfo»* ( )* query_info_finish
	has Pointer                       $.get_etag; # F:char* ( )* get_etag
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/glib-2.0/gobject/gvalue.h ==

class _GValue is repr('CStruct') is export {
	has gsize                         $.g_type; # Typedef<GType>->«Typedef<gsize>->«long unsigned int»» g_type
	has NYIRP6(Array with size)       $.data; # Union[2] data
}

# == /usr/include/glib-2.0/gobject/genums.h ==

class _GEnumClass is repr('CStruct') is export {
	has _GTypeClass                   $.g_type_class; # Typedef<GTypeClass>->«_GTypeClass» g_type_class
	has gint                          $.minimum; # Typedef<gint>->«int» minimum
	has gint                          $.maximum; # Typedef<gint>->«int» maximum
	has guint                         $.n_values; # Typedef<guint>->«unsigned int» n_values
	has _GEnumValue                   $.values; # Typedef<GEnumValue>->«_GEnumValue»* values
}
class _GFlagsClass is repr('CStruct') is export {
	has _GTypeClass                   $.g_type_class; # Typedef<GTypeClass>->«_GTypeClass» g_type_class
	has guint                         $.mask; # Typedef<guint>->«unsigned int» mask
	has guint                         $.n_values; # Typedef<guint>->«unsigned int» n_values
	has _GFlagsValue                  $.values; # Typedef<GFlagsValue>->«_GFlagsValue»* values
}
class _GEnumValue is repr('CStruct') is export {
	has gint                          $.value; # Typedef<gint>->«int» value
	has Pointer[gchar]                $.value_name; # const Typedef<gchar>->«char»* value_name
	has Pointer[gchar]                $.value_nick; # const Typedef<gchar>->«char»* value_nick
}
class _GFlagsValue is repr('CStruct') is export {
	has guint                         $.value; # Typedef<guint>->«unsigned int» value
	has Pointer[gchar]                $.value_name; # const Typedef<gchar>->«char»* value_name
	has Pointer[gchar]                $.value_nick; # const Typedef<gchar>->«char»* value_nick
}

# == /usr/include/gimp-2.0/libgimpcolor/gimpcolortransform.h ==

class _GimpColorTransformPrivate is repr('CStruct') is export {
}
class _GimpColorTransform is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GimpColorTransformPrivate    $.priv; # Typedef<GimpColorTransformPrivate>->«_GimpColorTransformPrivate»* priv
}
class _GimpColorTransformClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.progress; # F:void ( )* progress
	has Pointer                       $._gimp_reserved1; # F:void ( )* _gimp_reserved1
	has Pointer                       $._gimp_reserved2; # F:void ( )* _gimp_reserved2
	has Pointer                       $._gimp_reserved3; # F:void ( )* _gimp_reserved3
	has Pointer                       $._gimp_reserved4; # F:void ( )* _gimp_reserved4
}

# == /usr/include/glib-2.0/glib/gasyncqueue.h ==

class _GAsyncQueue is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gemblemedicon.h ==

class _GEmblemedIconPrivate is repr('CStruct') is export {
}
class _GEmblemedIcon is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GEmblemedIconPrivate         $.priv; # Typedef<GEmblemedIconPrivate>->«_GEmblemedIconPrivate»* priv
}
class _GEmblemedIconClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
}

# == /usr/include/glib-2.0/gio/gaction.h ==

class _GActionInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.get_name; # F:const Typedef<gchar>->«char»* ( )* get_name
	has Pointer                       $.get_parameter_type; # F:const Typedef<GVariantType>->«_GVariantType»* ( )* get_parameter_type
	has Pointer                       $.get_state_type; # F:const Typedef<GVariantType>->«_GVariantType»* ( )* get_state_type
	has Pointer                       $.get_state_hint; # F:Typedef<GVariant>->«_GVariant»* ( )* get_state_hint
	has Pointer                       $.get_enabled; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* get_enabled
	has Pointer                       $.get_state; # F:Typedef<GVariant>->«_GVariant»* ( )* get_state
	has Pointer                       $.change_state; # F:void ( )* change_state
	has Pointer                       $.activate; # F:void ( )* activate
}

# == /usr/include/glib-2.0/gobject/gparamspecs.h ==

class _GParamSpecChar is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has gint8                         $.minimum; # Typedef<gint8>->«signed char» minimum
	has gint8                         $.maximum; # Typedef<gint8>->«signed char» maximum
	has gint8                         $.default_value; # Typedef<gint8>->«signed char» default_value
}
class _GParamSpecUChar is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has guint8                        $.minimum; # Typedef<guint8>->«unsigned char» minimum
	has guint8                        $.maximum; # Typedef<guint8>->«unsigned char» maximum
	has guint8                        $.default_value; # Typedef<guint8>->«unsigned char» default_value
}
class _GParamSpecBoolean is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has gint                          $.default_value; # Typedef<gboolean>->«Typedef<gint>->«int»» default_value
}
class _GParamSpecInt is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has gint                          $.minimum; # Typedef<gint>->«int» minimum
	has gint                          $.maximum; # Typedef<gint>->«int» maximum
	has gint                          $.default_value; # Typedef<gint>->«int» default_value
}
class _GParamSpecUInt is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has guint                         $.minimum; # Typedef<guint>->«unsigned int» minimum
	has guint                         $.maximum; # Typedef<guint>->«unsigned int» maximum
	has guint                         $.default_value; # Typedef<guint>->«unsigned int» default_value
}
class _GParamSpecLong is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has glong                         $.minimum; # Typedef<glong>->«long int» minimum
	has glong                         $.maximum; # Typedef<glong>->«long int» maximum
	has glong                         $.default_value; # Typedef<glong>->«long int» default_value
}
class _GParamSpecULong is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has gulong                        $.minimum; # Typedef<gulong>->«long unsigned int» minimum
	has gulong                        $.maximum; # Typedef<gulong>->«long unsigned int» maximum
	has gulong                        $.default_value; # Typedef<gulong>->«long unsigned int» default_value
}
class _GParamSpecInt64 is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has gint64                        $.minimum; # Typedef<gint64>->«long int» minimum
	has gint64                        $.maximum; # Typedef<gint64>->«long int» maximum
	has gint64                        $.default_value; # Typedef<gint64>->«long int» default_value
}
class _GParamSpecUInt64 is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has guint64                       $.minimum; # Typedef<guint64>->«long unsigned int» minimum
	has guint64                       $.maximum; # Typedef<guint64>->«long unsigned int» maximum
	has guint64                       $.default_value; # Typedef<guint64>->«long unsigned int» default_value
}
class _GParamSpecUnichar is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has guint32                       $.default_value; # Typedef<gunichar>->«Typedef<guint32>->«unsigned int»» default_value
}
class _GParamSpecEnum is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has _GEnumClass                   $.enum_class; # Typedef<GEnumClass>->«_GEnumClass»* enum_class
	has gint                          $.default_value; # Typedef<gint>->«int» default_value
}
class _GParamSpecFlags is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has _GFlagsClass                  $.flags_class; # Typedef<GFlagsClass>->«_GFlagsClass»* flags_class
	has guint                         $.default_value; # Typedef<guint>->«unsigned int» default_value
}
class _GParamSpecFloat is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has gfloat                        $.minimum; # Typedef<gfloat>->«float» minimum
	has gfloat                        $.maximum; # Typedef<gfloat>->«float» maximum
	has gfloat                        $.default_value; # Typedef<gfloat>->«float» default_value
	has gfloat                        $.epsilon; # Typedef<gfloat>->«float» epsilon
}
class _GParamSpecDouble is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has gdouble                       $.minimum; # Typedef<gdouble>->«double» minimum
	has gdouble                       $.maximum; # Typedef<gdouble>->«double» maximum
	has gdouble                       $.default_value; # Typedef<gdouble>->«double» default_value
	has gdouble                       $.epsilon; # Typedef<gdouble>->«double» epsilon
}
class _GParamSpecString is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has Pointer[gchar]                $.default_value; # Typedef<gchar>->«char»* default_value
	has Pointer[gchar]                $.cset_first; # Typedef<gchar>->«char»* cset_first
	has Pointer[gchar]                $.cset_nth; # Typedef<gchar>->«char»* cset_nth
	has gchar                         $.substitutor; # Typedef<gchar>->«char» substitutor
	has guint                         $.null_fold_if_empty; # Typedef<guint>->«unsigned int» null_fold_if_empty
	has guint                         $.ensure_non_null; # Typedef<guint>->«unsigned int» ensure_non_null
}
class _GParamSpecParam is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
}
class _GParamSpecBoxed is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
}
class _GParamSpecPointer is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
}
class _GParamSpecValueArray is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has _GParamSpec                   $.element_spec; # Typedef<GParamSpec>->«_GParamSpec»* element_spec
	has guint                         $.fixed_n_elements; # Typedef<guint>->«unsigned int» fixed_n_elements
}
class _GParamSpecObject is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
}
class _GParamSpecOverride is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has _GParamSpec                   $.overridden; # Typedef<GParamSpec>->«_GParamSpec»* overridden
}
class _GParamSpecGType is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has gsize                         $.is_a_type; # Typedef<GType>->«Typedef<gsize>->«long unsigned int»» is_a_type
}
class _GParamSpecVariant is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has _GVariantType                 $.type; # Typedef<GVariantType>->«_GVariantType»* type
	has _GVariant                     $.default_value; # Typedef<GVariant>->«_GVariant»* default_value
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[4] padding
}

# == /usr/include/glib-2.0/gmodule.h ==

class _GModule is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gmenumodel.h ==

class _GMenuModelPrivate is repr('CStruct') is export {
}
class _GMenuAttributeIterPrivate is repr('CStruct') is export {
}
class _GMenuLinkIterPrivate is repr('CStruct') is export {
}
class _GMenuModel is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GMenuModelPrivate            $.priv; # Typedef<GMenuModelPrivate>->«_GMenuModelPrivate»* priv
}
class _GMenuModelClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.is_mutable; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* is_mutable
	has Pointer                       $.get_n_items; # F:Typedef<gint>->«int» ( )* get_n_items
	has Pointer                       $.get_item_attributes; # F:void ( )* get_item_attributes
	has Pointer                       $.iterate_item_attributes; # F:Typedef<GMenuAttributeIter>->«_GMenuAttributeIter»* ( )* iterate_item_attributes
	has Pointer                       $.get_item_attribute_value; # F:Typedef<GVariant>->«_GVariant»* ( )* get_item_attribute_value
	has Pointer                       $.get_item_links; # F:void ( )* get_item_links
	has Pointer                       $.iterate_item_links; # F:Typedef<GMenuLinkIter>->«_GMenuLinkIter»* ( )* iterate_item_links
	has Pointer                       $.get_item_link; # F:Typedef<GMenuModel>->«_GMenuModel»* ( )* get_item_link
}
class _GMenuAttributeIter is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GMenuAttributeIterPrivate    $.priv; # Typedef<GMenuAttributeIterPrivate>->«_GMenuAttributeIterPrivate»* priv
}
class _GMenuAttributeIterClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.get_next; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* get_next
}
class _GMenuLinkIter is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GMenuLinkIterPrivate         $.priv; # Typedef<GMenuLinkIterPrivate>->«_GMenuLinkIterPrivate»* priv
}
class _GMenuLinkIterClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.get_next; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* get_next
}

# == /usr/include/glib-2.0/gio/gproxy.h ==

class _GProxyInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.connect; # F:Typedef<GIOStream>->«_GIOStream»* ( )* connect
	has Pointer                       $.connect_async; # F:void ( )* connect_async
	has Pointer                       $.connect_finish; # F:Typedef<GIOStream>->«_GIOStream»* ( )* connect_finish
	has Pointer                       $.supports_hostname; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* supports_hostname
}

# == /usr/include/glib-2.0/gio/gdbusobject.h ==

class _GDBusObjectIface is repr('CStruct') is export {
	has _GTypeInterface               $.parent_iface; # Typedef<GTypeInterface>->«_GTypeInterface» parent_iface
	has Pointer                       $.get_object_path; # F:const Typedef<gchar>->«char»* ( )* get_object_path
	has Pointer                       $.get_interfaces; # F:Typedef<GList>->«_GList»* ( )* get_interfaces
	has Pointer                       $.get_interface; # F:Typedef<GDBusInterface>->«_GDBusInterface»* ( )* get_interface
	has Pointer                       $.interface_added; # F:void ( )* interface_added
	has Pointer                       $.interface_removed; # F:void ( )* interface_removed
}

# == /usr/include/glib-2.0/glib/ghmac.h ==

class _GHmac is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gobject/gbinding.h ==

class _GBinding is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/glib/giochannel.h ==

class _GIOChannel is repr('CStruct') is export {
	has gint                          $.ref_count; # Typedef<gint>->«int» ref_count
	has _GIOFuncs                     $.funcs; # Typedef<GIOFuncs>->«_GIOFuncs»* funcs
	has Pointer[gchar]                $.encoding; # Typedef<gchar>->«char»* encoding
	has _GIConv                       $.read_cd; # Typedef<GIConv>->«_GIConv*» read_cd
	has _GIConv                       $.write_cd; # Typedef<GIConv>->«_GIConv*» write_cd
	has Pointer[gchar]                $.line_term; # Typedef<gchar>->«char»* line_term
	has guint                         $.line_term_len; # Typedef<guint>->«unsigned int» line_term_len
	has gsize                         $.buf_size; # Typedef<gsize>->«long unsigned int» buf_size
	has _GString                      $.read_buf; # Typedef<GString>->«_GString»* read_buf
	has _GString                      $.encoded_read_buf; # Typedef<GString>->«_GString»* encoded_read_buf
	has _GString                      $.write_buf; # Typedef<GString>->«_GString»* write_buf
	has NYIRP6(Array with size)       $.partial_write_buf; # Typedef<gchar>->«char»[6] partial_write_buf
	has guint                         $.use_buffer; # Typedef<guint>->«unsigned int» use_buffer
	has guint                         $.do_encode; # Typedef<guint>->«unsigned int» do_encode
	has guint                         $.close_on_unref; # Typedef<guint>->«unsigned int» close_on_unref
	has guint                         $.is_readable; # Typedef<guint>->«unsigned int» is_readable
	has guint                         $.is_writeable; # Typedef<guint>->«unsigned int» is_writeable
	has guint                         $.is_seekable; # Typedef<guint>->«unsigned int» is_seekable
	has Pointer                       $.reserved1; # Typedef<gpointer>->«void*» reserved1
	has Pointer                       $.reserved2; # Typedef<gpointer>->«void*» reserved2
}
class _GIOFuncs is repr('CStruct') is export {
	has Pointer                       $.io_read; # F:Typedef<GIOStatus>->«GIOStatus» ( )* io_read
	has Pointer                       $.io_write; # F:Typedef<GIOStatus>->«GIOStatus» ( )* io_write
	has Pointer                       $.io_seek; # F:Typedef<GIOStatus>->«GIOStatus» ( )* io_seek
	has Pointer                       $.io_close; # F:Typedef<GIOStatus>->«GIOStatus» ( )* io_close
	has Pointer                       $.io_create_watch; # F:Typedef<GSource>->«_GSource»* ( )* io_create_watch
	has Pointer                       $.io_free; # F:void ( )* io_free
	has Pointer                       $.io_set_flags; # F:Typedef<GIOStatus>->«GIOStatus» ( )* io_set_flags
	has Pointer                       $.io_get_flags; # F:Typedef<GIOFlags>->«GIOFlags» ( )* io_get_flags
}

# == /usr/include/glib-2.0/gio/gnetworkaddress.h ==

class _GNetworkAddressPrivate is repr('CStruct') is export {
}
class _GNetworkAddress is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GNetworkAddressPrivate       $.priv; # Typedef<GNetworkAddressPrivate>->«_GNetworkAddressPrivate»* priv
}
class _GNetworkAddressClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
}

# == /usr/include/glib-2.0/glib/gtypes.h ==

class _GFloatIEEE754 is repr('CUnion') is export {
	has gfloat                        $.v_float; # Typedef<gfloat>->«float» v_float
	HAS                               $.mpn; #  mpn
}
class _GDoubleIEEE754 is repr('CUnion') is export {
	has gdouble                       $.v_double; # Typedef<gdouble>->«double» v_double
	HAS                               $.mpn; #  mpn
}
class _GTimeVal is repr('CStruct') is export {
	has glong                         $.tv_sec; # Typedef<glong>->«long int» tv_sec
	has glong                         $.tv_usec; # Typedef<glong>->«long int» tv_usec
}

# == /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h ==

class _GdkPixbufFormat is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/ginetaddress.h ==

class _GInetAddressPrivate is repr('CStruct') is export {
}
class _GInetAddress is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GInetAddressPrivate          $.priv; # Typedef<GInetAddressPrivate>->«_GInetAddressPrivate»* priv
}
class _GInetAddressClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.to_string; # F:Typedef<gchar>->«char»* ( )* to_string
	has Pointer                       $.to_bytes; # F:const Typedef<guint8>->«unsigned char»* ( )* to_bytes
}

# == /usr/include/glib-2.0/glib/gdataset.h ==

class _GData is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gconverterinputstream.h ==

class _GConverterInputStreamPrivate is repr('CStruct') is export {
}
class _GConverterInputStream is repr('CStruct') is export {
	has _GFilterInputStream           $.parent_instance; # Typedef<GFilterInputStream>->«_GFilterInputStream» parent_instance
	has _GConverterInputStreamPrivate $.priv; # Typedef<GConverterInputStreamPrivate>->«_GConverterInputStreamPrivate»* priv
}
class _GConverterInputStreamClass is repr('CStruct') is export {
	has _GFilterInputStreamClass      $.parent_class; # Typedef<GFilterInputStreamClass>->«_GFilterInputStreamClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/glib-2.0/gio/gdbuserror.h ==

class _GDBusErrorEntry is repr('CStruct') is export {
	has gint                          $.error_code; # Typedef<gint>->«int» error_code
	has Pointer[gchar]                $.dbus_error_name; # const Typedef<gchar>->«char»* dbus_error_name
}

# == /usr/include/glib-2.0/gio/gfileattribute.h ==

class _GFileAttributeInfo is repr('CStruct') is export {
	has Str                           $.name; # char* name
	has int32                         $.type; # Typedef<GFileAttributeType>->«GFileAttributeType» type
	has int32                         $.flags; # Typedef<GFileAttributeInfoFlags>->«GFileAttributeInfoFlags» flags
}
class _GFileAttributeInfoList is repr('CStruct') is export {
	has _GFileAttributeInfo           $.infos; # Typedef<GFileAttributeInfo>->«_GFileAttributeInfo»* infos
	has int32                         $.n_infos; # int n_infos
}

# == /usr/include/glib-2.0/gio/gfile.h ==

class _GFileIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.dup; # F:Typedef<GFile>->«_GFile»* ( )* dup
	has Pointer                       $.hash; # F:Typedef<guint>->«unsigned int» ( )* hash
	has Pointer                       $.equal; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* equal
	has Pointer                       $.is_native; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* is_native
	has Pointer                       $.has_uri_scheme; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* has_uri_scheme
	has Pointer                       $.get_uri_scheme; # F:char* ( )* get_uri_scheme
	has Pointer                       $.get_basename; # F:char* ( )* get_basename
	has Pointer                       $.get_path; # F:char* ( )* get_path
	has Pointer                       $.get_uri; # F:char* ( )* get_uri
	has Pointer                       $.get_parse_name; # F:char* ( )* get_parse_name
	has Pointer                       $.get_parent; # F:Typedef<GFile>->«_GFile»* ( )* get_parent
	has Pointer                       $.prefix_matches; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* prefix_matches
	has Pointer                       $.get_relative_path; # F:char* ( )* get_relative_path
	has Pointer                       $.resolve_relative_path; # F:Typedef<GFile>->«_GFile»* ( )* resolve_relative_path
	has Pointer                       $.get_child_for_display_name; # F:Typedef<GFile>->«_GFile»* ( )* get_child_for_display_name
	has Pointer                       $.enumerate_children; # F:Typedef<GFileEnumerator>->«_GFileEnumerator»* ( )* enumerate_children
	has Pointer                       $.enumerate_children_async; # F:void ( )* enumerate_children_async
	has Pointer                       $.enumerate_children_finish; # F:Typedef<GFileEnumerator>->«_GFileEnumerator»* ( )* enumerate_children_finish
	has Pointer                       $.query_info; # F:Typedef<GFileInfo>->«_GFileInfo»* ( )* query_info
	has Pointer                       $.query_info_async; # F:void ( )* query_info_async
	has Pointer                       $.query_info_finish; # F:Typedef<GFileInfo>->«_GFileInfo»* ( )* query_info_finish
	has Pointer                       $.query_filesystem_info; # F:Typedef<GFileInfo>->«_GFileInfo»* ( )* query_filesystem_info
	has Pointer                       $.query_filesystem_info_async; # F:void ( )* query_filesystem_info_async
	has Pointer                       $.query_filesystem_info_finish; # F:Typedef<GFileInfo>->«_GFileInfo»* ( )* query_filesystem_info_finish
	has Pointer                       $.find_enclosing_mount; # F:Typedef<GMount>->«_GMount»* ( )* find_enclosing_mount
	has Pointer                       $.find_enclosing_mount_async; # F:void ( )* find_enclosing_mount_async
	has Pointer                       $.find_enclosing_mount_finish; # F:Typedef<GMount>->«_GMount»* ( )* find_enclosing_mount_finish
	has Pointer                       $.set_display_name; # F:Typedef<GFile>->«_GFile»* ( )* set_display_name
	has Pointer                       $.set_display_name_async; # F:void ( )* set_display_name_async
	has Pointer                       $.set_display_name_finish; # F:Typedef<GFile>->«_GFile»* ( )* set_display_name_finish
	has Pointer                       $.query_settable_attributes; # F:Typedef<GFileAttributeInfoList>->«_GFileAttributeInfoList»* ( )* query_settable_attributes
	has Pointer                       $._query_settable_attributes_async; # F:void ( )* _query_settable_attributes_async
	has Pointer                       $._query_settable_attributes_finish; # F:void ( )* _query_settable_attributes_finish
	has Pointer                       $.query_writable_namespaces; # F:Typedef<GFileAttributeInfoList>->«_GFileAttributeInfoList»* ( )* query_writable_namespaces
	has Pointer                       $._query_writable_namespaces_async; # F:void ( )* _query_writable_namespaces_async
	has Pointer                       $._query_writable_namespaces_finish; # F:void ( )* _query_writable_namespaces_finish
	has Pointer                       $.set_attribute; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* set_attribute
	has Pointer                       $.set_attributes_from_info; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* set_attributes_from_info
	has Pointer                       $.set_attributes_async; # F:void ( )* set_attributes_async
	has Pointer                       $.set_attributes_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* set_attributes_finish
	has Pointer                       $.read_fn; # F:Typedef<GFileInputStream>->«_GFileInputStream»* ( )* read_fn
	has Pointer                       $.read_async; # F:void ( )* read_async
	has Pointer                       $.read_finish; # F:Typedef<GFileInputStream>->«_GFileInputStream»* ( )* read_finish
	has Pointer                       $.append_to; # F:Typedef<GFileOutputStream>->«_GFileOutputStream»* ( )* append_to
	has Pointer                       $.append_to_async; # F:void ( )* append_to_async
	has Pointer                       $.append_to_finish; # F:Typedef<GFileOutputStream>->«_GFileOutputStream»* ( )* append_to_finish
	has Pointer                       $.create; # F:Typedef<GFileOutputStream>->«_GFileOutputStream»* ( )* create
	has Pointer                       $.create_async; # F:void ( )* create_async
	has Pointer                       $.create_finish; # F:Typedef<GFileOutputStream>->«_GFileOutputStream»* ( )* create_finish
	has Pointer                       $.replace; # F:Typedef<GFileOutputStream>->«_GFileOutputStream»* ( )* replace
	has Pointer                       $.replace_async; # F:void ( )* replace_async
	has Pointer                       $.replace_finish; # F:Typedef<GFileOutputStream>->«_GFileOutputStream»* ( )* replace_finish
	has Pointer                       $.delete_file; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* delete_file
	has Pointer                       $.delete_file_async; # F:void ( )* delete_file_async
	has Pointer                       $.delete_file_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* delete_file_finish
	has Pointer                       $.trash; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* trash
	has Pointer                       $.trash_async; # F:void ( )* trash_async
	has Pointer                       $.trash_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* trash_finish
	has Pointer                       $.make_directory; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* make_directory
	has Pointer                       $.make_directory_async; # F:void ( )* make_directory_async
	has Pointer                       $.make_directory_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* make_directory_finish
	has Pointer                       $.make_symbolic_link; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* make_symbolic_link
	has Pointer                       $._make_symbolic_link_async; # F:void ( )* _make_symbolic_link_async
	has Pointer                       $._make_symbolic_link_finish; # F:void ( )* _make_symbolic_link_finish
	has Pointer                       $.copy; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* copy
	has Pointer                       $.copy_async; # F:void ( )* copy_async
	has Pointer                       $.copy_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* copy_finish
	has Pointer                       $.move; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* move
	has Pointer                       $._move_async; # F:void ( )* _move_async
	has Pointer                       $._move_finish; # F:void ( )* _move_finish
	has Pointer                       $.mount_mountable; # F:void ( )* mount_mountable
	has Pointer                       $.mount_mountable_finish; # F:Typedef<GFile>->«_GFile»* ( )* mount_mountable_finish
	has Pointer                       $.unmount_mountable; # F:void ( )* unmount_mountable
	has Pointer                       $.unmount_mountable_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* unmount_mountable_finish
	has Pointer                       $.eject_mountable; # F:void ( )* eject_mountable
	has Pointer                       $.eject_mountable_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* eject_mountable_finish
	has Pointer                       $.mount_enclosing_volume; # F:void ( )* mount_enclosing_volume
	has Pointer                       $.mount_enclosing_volume_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* mount_enclosing_volume_finish
	has Pointer                       $.monitor_dir; # F:Typedef<GFileMonitor>->«_GFileMonitor»* ( )* monitor_dir
	has Pointer                       $.monitor_file; # F:Typedef<GFileMonitor>->«_GFileMonitor»* ( )* monitor_file
	has Pointer                       $.open_readwrite; # F:Typedef<GFileIOStream>->«_GFileIOStream»* ( )* open_readwrite
	has Pointer                       $.open_readwrite_async; # F:void ( )* open_readwrite_async
	has Pointer                       $.open_readwrite_finish; # F:Typedef<GFileIOStream>->«_GFileIOStream»* ( )* open_readwrite_finish
	has Pointer                       $.create_readwrite; # F:Typedef<GFileIOStream>->«_GFileIOStream»* ( )* create_readwrite
	has Pointer                       $.create_readwrite_async; # F:void ( )* create_readwrite_async
	has Pointer                       $.create_readwrite_finish; # F:Typedef<GFileIOStream>->«_GFileIOStream»* ( )* create_readwrite_finish
	has Pointer                       $.replace_readwrite; # F:Typedef<GFileIOStream>->«_GFileIOStream»* ( )* replace_readwrite
	has Pointer                       $.replace_readwrite_async; # F:void ( )* replace_readwrite_async
	has Pointer                       $.replace_readwrite_finish; # F:Typedef<GFileIOStream>->«_GFileIOStream»* ( )* replace_readwrite_finish
	has Pointer                       $.start_mountable; # F:void ( )* start_mountable
	has Pointer                       $.start_mountable_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* start_mountable_finish
	has Pointer                       $.stop_mountable; # F:void ( )* stop_mountable
	has Pointer                       $.stop_mountable_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* stop_mountable_finish
	has gint                          $.supports_thread_contexts; # Typedef<gboolean>->«Typedef<gint>->«int»» supports_thread_contexts
	has Pointer                       $.unmount_mountable_with_operation; # F:void ( )* unmount_mountable_with_operation
	has Pointer                       $.unmount_mountable_with_operation_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* unmount_mountable_with_operation_finish
	has Pointer                       $.eject_mountable_with_operation; # F:void ( )* eject_mountable_with_operation
	has Pointer                       $.eject_mountable_with_operation_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* eject_mountable_with_operation_finish
	has Pointer                       $.poll_mountable; # F:void ( )* poll_mountable
	has Pointer                       $.poll_mountable_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* poll_mountable_finish
	has Pointer                       $.measure_disk_usage; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* measure_disk_usage
	has Pointer                       $.measure_disk_usage_async; # F:void ( )* measure_disk_usage_async
	has Pointer                       $.measure_disk_usage_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* measure_disk_usage_finish
}

# == /usr/include/glib-2.0/gio/gdbusobjectmanager.h ==

class _GDBusObjectManagerIface is repr('CStruct') is export {
	has _GTypeInterface               $.parent_iface; # Typedef<GTypeInterface>->«_GTypeInterface» parent_iface
	has Pointer                       $.get_object_path; # F:const Typedef<gchar>->«char»* ( )* get_object_path
	has Pointer                       $.get_objects; # F:Typedef<GList>->«_GList»* ( )* get_objects
	has Pointer                       $.get_object; # F:Typedef<GDBusObject>->«_GDBusObject»* ( )* get_object
	has Pointer                       $.get_interface; # F:Typedef<GDBusInterface>->«_GDBusInterface»* ( )* get_interface
	has Pointer                       $.object_added; # F:void ( )* object_added
	has Pointer                       $.object_removed; # F:void ( )* object_removed
	has Pointer                       $.interface_added; # F:void ( )* interface_added
	has Pointer                       $.interface_removed; # F:void ( )* interface_removed
}

# == /usr/include/glib-2.0/gio/goutputstream.h ==

class _GOutputStreamPrivate is repr('CStruct') is export {
}
class _GOutputStream is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GOutputStreamPrivate         $.priv; # Typedef<GOutputStreamPrivate>->«_GOutputStreamPrivate»* priv
}
class _GOutputStreamClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.write_fn; # F:Typedef<gssize>->«long int» ( )* write_fn
	has Pointer                       $.splice; # F:Typedef<gssize>->«long int» ( )* splice
	has Pointer                       $.flush; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* flush
	has Pointer                       $.close_fn; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* close_fn
	has Pointer                       $.write_async; # F:void ( )* write_async
	has Pointer                       $.write_finish; # F:Typedef<gssize>->«long int» ( )* write_finish
	has Pointer                       $.splice_async; # F:void ( )* splice_async
	has Pointer                       $.splice_finish; # F:Typedef<gssize>->«long int» ( )* splice_finish
	has Pointer                       $.flush_async; # F:void ( )* flush_async
	has Pointer                       $.flush_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* flush_finish
	has Pointer                       $.close_async; # F:void ( )* close_async
	has Pointer                       $.close_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* close_finish
	has Pointer                       $.writev_fn; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* writev_fn
	has Pointer                       $.writev_async; # F:void ( )* writev_async
	has Pointer                       $.writev_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* writev_finish
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
	has Pointer                       $._g_reserved6; # F:void ( )* _g_reserved6
	has Pointer                       $._g_reserved7; # F:void ( )* _g_reserved7
	has Pointer                       $._g_reserved8; # F:void ( )* _g_reserved8
}

# == /usr/include/glib-2.0/gobject/gobject.h ==

class _GObject is repr('CStruct') is export {
	has _GTypeInstance                $.g_type_instance; # Typedef<GTypeInstance>->«_GTypeInstance» g_type_instance
	has guint                         $.ref_count; # const Typedef<guint>->«unsigned int» ref_count
	has _GData                        $.qdata; # Typedef<GData>->«_GData»* qdata
}
class _GObjectClass is repr('CStruct') is export {
	has _GTypeClass                   $.g_type_class; # Typedef<GTypeClass>->«_GTypeClass» g_type_class
	has _GSList                       $.construct_properties; # Typedef<GSList>->«_GSList»* construct_properties
	has Pointer                       $.constructor; # F:Typedef<GObject>->«_GObject»* ( )* constructor
	has Pointer                       $.set_property; # F:void ( )* set_property
	has Pointer                       $.get_property; # F:void ( )* get_property
	has Pointer                       $.dispose; # F:void ( )* dispose
	has Pointer                       $.finalize; # F:void ( )* finalize
	has Pointer                       $.dispatch_properties_changed; # F:void ( )* dispatch_properties_changed
	has Pointer                       $.notify; # F:void ( )* notify
	has Pointer                       $.constructed; # F:void ( )* constructed
	has gsize                         $.flags; # Typedef<gsize>->«long unsigned int» flags
	has NYIRP6(Array with size)       $.pdummy; # Typedef<gpointer>->«void*»[6] pdummy
}
class _GObjectConstructParam is repr('CStruct') is export {
	has _GParamSpec                   $.pspec; # Typedef<GParamSpec>->«_GParamSpec»* pspec
	has _GValue                       $.value; # Typedef<GValue>->«_GValue»* value
}

# == /usr/include/glib-2.0/gio/gdatagrambased.h ==

class _GDatagramBasedInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.receive_messages; # F:Typedef<gint>->«int» ( )* receive_messages
	has Pointer                       $.send_messages; # F:Typedef<gint>->«int» ( )* send_messages
	has Pointer                       $.create_source; # F:Typedef<GSource>->«_GSource»* ( )* create_source
	has Pointer                       $.condition_check; # F:Typedef<GIOCondition>->«GIOCondition» ( )* condition_check
	has Pointer                       $.condition_wait; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* condition_wait
}

# == /usr/include/glib-2.0/glib/gscanner.h ==

class _GTokenValue is repr('CUnion') is export {
	has Pointer                       $.v_symbol; # Typedef<gpointer>->«void*» v_symbol
	has Pointer[gchar]                $.v_identifier; # Typedef<gchar>->«char»* v_identifier
	has gulong                        $.v_binary; # Typedef<gulong>->«long unsigned int» v_binary
	has gulong                        $.v_octal; # Typedef<gulong>->«long unsigned int» v_octal
	has gulong                        $.v_int; # Typedef<gulong>->«long unsigned int» v_int
	has guint64                       $.v_int64; # Typedef<guint64>->«long unsigned int» v_int64
	has gdouble                       $.v_float; # Typedef<gdouble>->«double» v_float
	has gulong                        $.v_hex; # Typedef<gulong>->«long unsigned int» v_hex
	has Pointer[gchar]                $.v_string; # Typedef<gchar>->«char»* v_string
	has Pointer[gchar]                $.v_comment; # Typedef<gchar>->«char»* v_comment
	has guchar                        $.v_char; # Typedef<guchar>->«unsigned char» v_char
	has guint                         $.v_error; # Typedef<guint>->«unsigned int» v_error
}
class _GScannerConfig is repr('CStruct') is export {
	has Pointer[gchar]                $.cset_skip_characters; # Typedef<gchar>->«char»* cset_skip_characters
	has Pointer[gchar]                $.cset_identifier_first; # Typedef<gchar>->«char»* cset_identifier_first
	has Pointer[gchar]                $.cset_identifier_nth; # Typedef<gchar>->«char»* cset_identifier_nth
	has Pointer[gchar]                $.cpair_comment_single; # Typedef<gchar>->«char»* cpair_comment_single
	has guint                         $.case_sensitive; # Typedef<guint>->«unsigned int» case_sensitive
	has guint                         $.skip_comment_multi; # Typedef<guint>->«unsigned int» skip_comment_multi
	has guint                         $.skip_comment_single; # Typedef<guint>->«unsigned int» skip_comment_single
	has guint                         $.scan_comment_multi; # Typedef<guint>->«unsigned int» scan_comment_multi
	has guint                         $.scan_identifier; # Typedef<guint>->«unsigned int» scan_identifier
	has guint                         $.scan_identifier_1char; # Typedef<guint>->«unsigned int» scan_identifier_1char
	has guint                         $.scan_identifier_NULL; # Typedef<guint>->«unsigned int» scan_identifier_NULL
	has guint                         $.scan_symbols; # Typedef<guint>->«unsigned int» scan_symbols
	has guint                         $.scan_binary; # Typedef<guint>->«unsigned int» scan_binary
	has guint                         $.scan_octal; # Typedef<guint>->«unsigned int» scan_octal
	has guint                         $.scan_float; # Typedef<guint>->«unsigned int» scan_float
	has guint                         $.scan_hex; # Typedef<guint>->«unsigned int» scan_hex
	has guint                         $.scan_hex_dollar; # Typedef<guint>->«unsigned int» scan_hex_dollar
	has guint                         $.scan_string_sq; # Typedef<guint>->«unsigned int» scan_string_sq
	has guint                         $.scan_string_dq; # Typedef<guint>->«unsigned int» scan_string_dq
	has guint                         $.numbers_2_int; # Typedef<guint>->«unsigned int» numbers_2_int
	has guint                         $.int_2_float; # Typedef<guint>->«unsigned int» int_2_float
	has guint                         $.identifier_2_string; # Typedef<guint>->«unsigned int» identifier_2_string
	has guint                         $.char_2_token; # Typedef<guint>->«unsigned int» char_2_token
	has guint                         $.symbol_2_token; # Typedef<guint>->«unsigned int» symbol_2_token
	has guint                         $.scope_0_fallback; # Typedef<guint>->«unsigned int» scope_0_fallback
	has guint                         $.store_int64; # Typedef<guint>->«unsigned int» store_int64
	has guint                         $.padding_dummy; # Typedef<guint>->«unsigned int» padding_dummy
}
class _GScanner is repr('CStruct') is export {
	has Pointer                       $.user_data; # Typedef<gpointer>->«void*» user_data
	has guint                         $.max_parse_errors; # Typedef<guint>->«unsigned int» max_parse_errors
	has guint                         $.parse_errors; # Typedef<guint>->«unsigned int» parse_errors
	has Pointer[gchar]                $.input_name; # const Typedef<gchar>->«char»* input_name
	has _GData                        $.qdata; # Typedef<GData>->«_GData»* qdata
	has _GScannerConfig               $.config; # Typedef<GScannerConfig>->«_GScannerConfig»* config
	has int32                         $.token; # Typedef<GTokenType>->«GTokenType» token
	has _GTokenValue                  $.value; # Typedef<GTokenValue>->«Union» value
	has guint                         $.line; # Typedef<guint>->«unsigned int» line
	has guint                         $.position; # Typedef<guint>->«unsigned int» position
	has int32                         $.next_token; # Typedef<GTokenType>->«GTokenType» next_token
	has _GTokenValue                  $.next_value; # Typedef<GTokenValue>->«Union» next_value
	has guint                         $.next_line; # Typedef<guint>->«unsigned int» next_line
	has guint                         $.next_position; # Typedef<guint>->«unsigned int» next_position
	has _GHashTable                   $.symbol_table; # Typedef<GHashTable>->«_GHashTable»* symbol_table
	has gint                          $.input_fd; # Typedef<gint>->«int» input_fd
	has Pointer[gchar]                $.text; # const Typedef<gchar>->«char»* text
	has Pointer[gchar]                $.text_end; # const Typedef<gchar>->«char»* text_end
	has Pointer[gchar]                $.buffer; # Typedef<gchar>->«char»* buffer
	has guint                         $.scope_id; # Typedef<guint>->«unsigned int» scope_id
	has Pointer                       $.msg_handler; # Typedef<GScannerMsgFunc>->«F:void ( )*» msg_handler
}

# == /usr/include/glib-2.0/gio/gzlibcompressor.h ==

class _GZlibCompressorClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
}

# == /usr/include/glib-2.0/gio/gsocketaddress.h ==

class _GSocketAddress is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
}
class _GSocketAddressClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.get_family; # F:Typedef<GSocketFamily>->«GSocketFamily» ( )* get_family
	has Pointer                       $.get_native_size; # F:Typedef<gssize>->«long int» ( )* get_native_size
	has Pointer                       $.to_native; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* to_native
}

# == /usr/include/babl-0.1/babl/babl-types.h ==

class _Babl is repr('CUnion') is export {
}

# == /usr/include/glib-2.0/gio/gasyncinitable.h ==

class _GAsyncInitableIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.init_async; # F:void ( )* init_async
	has Pointer                       $.init_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* init_finish
}

# == /usr/include/glib-2.0/gio/gdtlsclientconnection.h ==

class _GDtlsClientConnectionInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
}

# == /usr/include/gegl-0.4/gegl-buffer-iterator.h ==

class _GeglBufferIteratorPriv is repr('CStruct') is export {
}
class GeglBufferIteratorItem is repr('CStruct') is export {
	has Pointer                       $.data; # Typedef<gpointer>->«void*» data
	has _GeglRectangle                $.roi; # Typedef<GeglRectangle>->«_GeglRectangle» roi
}
class GeglBufferIterator is repr('CStruct') is export {
	has gint                          $.length; # Typedef<gint>->«int» length
	has _GeglBufferIteratorPriv       $.priv; # Typedef<GeglBufferIteratorPriv>->«_GeglBufferIteratorPriv»* priv
	has NYIRP6(Array with size)       $.items; # Typedef<GeglBufferIteratorItem>->«GeglBufferIteratorItem»[1] items
}

# == /usr/include/gimp-2.0/libgimpconfig/gimpconfig-iface.h ==

class _GimpConfigInterface is repr('CStruct') is export {
	has _GTypeInterface               $.base_iface; # Typedef<GTypeInterface>->«_GTypeInterface» base_iface
	has Pointer                       $.serialize; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* serialize
	has Pointer                       $.deserialize; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* deserialize
	has Pointer                       $.serialize_property; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* serialize_property
	has Pointer                       $.deserialize_property; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* deserialize_property
	has Pointer                       $.duplicate; # F:Typedef<GimpConfig>->«_GimpConfig»* ( )* duplicate
	has Pointer                       $.equal; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* equal
	has Pointer                       $.reset; # F:void ( )* reset
	has Pointer                       $.copy; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* copy
}

# == /usr/include/glib-2.0/gio/gproxyresolver.h ==

class _GProxyResolverInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.is_supported; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* is_supported
	has Pointer                       $.lookup; # F:Typedef<gchar>->«char»** ( )* lookup
	has Pointer                       $.lookup_async; # F:void ( )* lookup_async
	has Pointer                       $.lookup_finish; # F:Typedef<gchar>->«char»** ( )* lookup_finish
}

# == /usr/include/glib-2.0/glib/gdir.h ==

class _GDir is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/glib/gerror.h ==

class _GError is repr('CStruct') is export {
	has guint32                       $.domain; # Typedef<GQuark>->«Typedef<guint32>->«unsigned int»» domain
	has gint                          $.code; # Typedef<gint>->«int» code
	has Pointer[gchar]                $.message; # Typedef<gchar>->«char»* message
}

# == /usr/include/glib-2.0/glib/gsequence.h ==

class _GSequence is repr('CStruct') is export {
}
class _GSequenceNode is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/glib/gmem.h ==

class _GMemVTable is repr('CStruct') is export {
	has Pointer                       $.malloc; # F:Typedef<gpointer>->«void*» ( )* malloc
	has Pointer                       $.realloc; # F:Typedef<gpointer>->«void*» ( )* realloc
	has Pointer                       $.free; # F:void ( )* free
	has Pointer                       $.calloc; # F:Typedef<gpointer>->«void*» ( )* calloc
	has Pointer                       $.try_malloc; # F:Typedef<gpointer>->«void*» ( )* try_malloc
	has Pointer                       $.try_realloc; # F:Typedef<gpointer>->«void*» ( )* try_realloc
}

# == /usr/include/glib-2.0/gio/gdatainputstream.h ==

class _GDataInputStreamPrivate is repr('CStruct') is export {
}
class _GDataInputStream is repr('CStruct') is export {
	has _GBufferedInputStream         $.parent_instance; # Typedef<GBufferedInputStream>->«_GBufferedInputStream» parent_instance
	has _GDataInputStreamPrivate      $.priv; # Typedef<GDataInputStreamPrivate>->«_GDataInputStreamPrivate»* priv
}
class _GDataInputStreamClass is repr('CStruct') is export {
	has _GBufferedInputStreamClass    $.parent_class; # Typedef<GBufferedInputStreamClass>->«_GBufferedInputStreamClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/glib-2.0/gio/glistmodel.h ==

class _GListModel is repr('CStruct') is export {
}
class _GListModelInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.get_item_type; # F:Typedef<GType>->«Typedef<gsize>->«long unsigned int»» ( )* get_item_type
	has Pointer                       $.get_n_items; # F:Typedef<guint>->«unsigned int» ( )* get_n_items
	has Pointer                       $.get_item; # F:Typedef<gpointer>->«void*» ( )* get_item
}

# == /usr/include/glib-2.0/gio/gbufferedoutputstream.h ==

class _GBufferedOutputStreamPrivate is repr('CStruct') is export {
}
class _GBufferedOutputStream is repr('CStruct') is export {
	has _GFilterOutputStream          $.parent_instance; # Typedef<GFilterOutputStream>->«_GFilterOutputStream» parent_instance
	has _GBufferedOutputStreamPrivate $.priv; # Typedef<GBufferedOutputStreamPrivate>->«_GBufferedOutputStreamPrivate»* priv
}
class _GBufferedOutputStreamClass is repr('CStruct') is export {
	has _GFilterOutputStreamClass     $.parent_class; # Typedef<GFilterOutputStreamClass>->«_GFilterOutputStreamClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
}

# == /usr/include/glib-2.0/gio/gtlsinteraction.h ==

class _GTlsInteractionPrivate is repr('CStruct') is export {
}
class _GTlsInteraction is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GTlsInteractionPrivate       $.priv; # Typedef<GTlsInteractionPrivate>->«_GTlsInteractionPrivate»* priv
}
class _GTlsInteractionClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.ask_password; # F:Typedef<GTlsInteractionResult>->«GTlsInteractionResult» ( )* ask_password
	has Pointer                       $.ask_password_async; # F:void ( )* ask_password_async
	has Pointer                       $.ask_password_finish; # F:Typedef<GTlsInteractionResult>->«GTlsInteractionResult» ( )* ask_password_finish
	has Pointer                       $.request_certificate; # F:Typedef<GTlsInteractionResult>->«GTlsInteractionResult» ( )* request_certificate
	has Pointer                       $.request_certificate_async; # F:void ( )* request_certificate_async
	has Pointer                       $.request_certificate_finish; # F:Typedef<GTlsInteractionResult>->«GTlsInteractionResult» ( )* request_certificate_finish
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[21] padding
}

# == /usr/include/glib-2.0/glib/gvariant.h ==

class _GVariant is repr('CStruct') is export {
}
class _GVariantIter is repr('CStruct') is export {
	has NYIRP6(Array with size)       $.x; # Typedef<gsize>->«long unsigned int»[16] x
}
class _GVariantBuilder is repr('CStruct') is export {
	HAS                               $.u; # Union u
}
class _GVariantDict is repr('CStruct') is export {
	HAS                               $.u; # Union u
}

# == /usr/include/glib-2.0/gio/gfileenumerator.h ==

class _GFileEnumeratorPrivate is repr('CStruct') is export {
}
class _GFileEnumerator is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GFileEnumeratorPrivate       $.priv; # Typedef<GFileEnumeratorPrivate>->«_GFileEnumeratorPrivate»* priv
}
class _GFileEnumeratorClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.next_file; # F:Typedef<GFileInfo>->«_GFileInfo»* ( )* next_file
	has Pointer                       $.close_fn; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* close_fn
	has Pointer                       $.next_files_async; # F:void ( )* next_files_async
	has Pointer                       $.next_files_finish; # F:Typedef<GList>->«_GList»* ( )* next_files_finish
	has Pointer                       $.close_async; # F:void ( )* close_async
	has Pointer                       $.close_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* close_finish
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
	has Pointer                       $._g_reserved6; # F:void ( )* _g_reserved6
	has Pointer                       $._g_reserved7; # F:void ( )* _g_reserved7
}

# == /usr/include/gimp-2.0/libgimpcolor/gimpcolormanaged.h ==

class _GimpColorManagedInterface is repr('CStruct') is export {
	has _GTypeInterface               $.base_iface; # Typedef<GTypeInterface>->«_GTypeInterface» base_iface
	has Pointer                       $.get_icc_profile; # F:const Typedef<guint8>->«unsigned char»* ( )* get_icc_profile
	has Pointer                       $.profile_changed; # F:void ( )* profile_changed
	has Pointer                       $.get_color_profile; # F:Typedef<GimpColorProfile>->«_GimpColorProfile»* ( )* get_color_profile
}

# == /usr/include/glib-2.0/gio/gsocketlistener.h ==

class _GSocketListenerPrivate is repr('CStruct') is export {
}
class _GSocketListenerClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.changed; # F:void ( )* changed
	has Pointer                       $.event; # F:void ( )* event
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
	has Pointer                       $._g_reserved6; # F:void ( )* _g_reserved6
}
class _GSocketListener is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GSocketListenerPrivate       $.priv; # Typedef<GSocketListenerPrivate>->«_GSocketListenerPrivate»* priv
}

# == /usr/include/glib-2.0/gio/gdbusconnection.h ==

class _GDBusInterfaceVTable is repr('CStruct') is export {
	has Pointer                       $.method_call; # Typedef<GDBusInterfaceMethodCallFunc>->«F:void ( )*» method_call
	has Pointer                       $.get_property; # Typedef<GDBusInterfaceGetPropertyFunc>->«F:Typedef<GVariant>->«_GVariant»* ( )*» get_property
	has Pointer                       $.set_property; # Typedef<GDBusInterfaceSetPropertyFunc>->«F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )*» set_property
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[8] padding
}
class _GDBusSubtreeVTable is repr('CStruct') is export {
	has Pointer                       $.enumerate; # Typedef<GDBusSubtreeEnumerateFunc>->«F:Typedef<gchar>->«char»** ( )*» enumerate
	has Pointer                       $.introspect; # Typedef<GDBusSubtreeIntrospectFunc>->«F:Typedef<GDBusInterfaceInfo>->«_GDBusInterfaceInfo»** ( )*» introspect
	has Pointer                       $.dispatch; # Typedef<GDBusSubtreeDispatchFunc>->«F:const Typedef<GDBusInterfaceVTable>->«_GDBusInterfaceVTable»* ( )*» dispatch
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[8] padding
}

# == /usr/include/glib-2.0/glib/gchecksum.h ==

class _GChecksum is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/glib/gtimer.h ==

class _GTimer is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gsocketservice.h ==

class _GSocketServicePrivate is repr('CStruct') is export {
}
class _GSocketServiceClass is repr('CStruct') is export {
	has _GSocketListenerClass         $.parent_class; # Typedef<GSocketListenerClass>->«_GSocketListenerClass» parent_class
	has Pointer                       $.incoming; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* incoming
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
	has Pointer                       $._g_reserved6; # F:void ( )* _g_reserved6
}
class _GSocketService is repr('CStruct') is export {
	has _GSocketListener              $.parent_instance; # Typedef<GSocketListener>->«_GSocketListener» parent_instance
	has _GSocketServicePrivate        $.priv; # Typedef<GSocketServicePrivate>->«_GSocketServicePrivate»* priv
}

# == /usr/include/glib-2.0/gio/gapplicationcommandline.h ==

class _GApplicationCommandLinePrivate is repr('CStruct') is export {
}
class _GApplicationCommandLine is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GApplicationCommandLinePrivate$.priv; # Typedef<GApplicationCommandLinePrivate>->«_GApplicationCommandLinePrivate»* priv
}
class _GApplicationCommandLineClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.print_literal; # F:void ( )* print_literal
	has Pointer                       $.printerr_literal; # F:void ( )* printerr_literal
	has Pointer                       $.get_stdin; # F:Typedef<GInputStream>->«_GInputStream»* ( )* get_stdin
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[11] padding
}

# == /usr/include/glib-2.0/gio/gpermission.h ==

class _GPermissionPrivate is repr('CStruct') is export {
}
class _GPermission is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GPermissionPrivate           $.priv; # Typedef<GPermissionPrivate>->«_GPermissionPrivate»* priv
}
class _GPermissionClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.acquire; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* acquire
	has Pointer                       $.acquire_async; # F:void ( )* acquire_async
	has Pointer                       $.acquire_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* acquire_finish
	has Pointer                       $.release; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* release
	has Pointer                       $.release_async; # F:void ( )* release_async
	has Pointer                       $.release_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* release_finish
	has NYIRP6(Array with size)       $.reserved; # Typedef<gpointer>->«void*»[16] reserved
}

# == /usr/include/gimp-2.0/libgimpbase/gimpparasite.h ==

class _GimpParasite is repr('CStruct') is export {
	has Pointer[gchar]                $.name; # Typedef<gchar>->«char»* name
	has guint32                       $.flags; # Typedef<guint32>->«unsigned int» flags
	has guint32                       $.size; # Typedef<guint32>->«unsigned int» size
	has Pointer                       $.data; # Typedef<gpointer>->«void*» data
}

# == /usr/include/glib-2.0/glib/gdate.h ==

class _GDate is repr('CStruct') is export {
	has guint                         $.julian_days; # Typedef<guint>->«unsigned int» julian_days
	has guint                         $.julian; # Typedef<guint>->«unsigned int» julian
	has guint                         $.dmy; # Typedef<guint>->«unsigned int» dmy
	has guint                         $.day; # Typedef<guint>->«unsigned int» day
	has guint                         $.month; # Typedef<guint>->«unsigned int» month
	has guint                         $.year; # Typedef<guint>->«unsigned int» year
}

# == /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h ==

class _GDBusObjectManagerClientPrivate is repr('CStruct') is export {
}
class _GDBusObjectManagerClient is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GDBusObjectManagerClientPrivate$.priv; # Typedef<GDBusObjectManagerClientPrivate>->«_GDBusObjectManagerClientPrivate»* priv
}
class _GDBusObjectManagerClientClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.interface_proxy_signal; # F:void ( )* interface_proxy_signal
	has Pointer                       $.interface_proxy_properties_changed; # F:void ( )* interface_proxy_properties_changed
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[8] padding
}

# == /usr/include/glib-2.0/glib/deprecated/gthread.h ==

class _GThread is repr('CStruct') is export {
	has Pointer                       $.func; # Typedef<GThreadFunc>->«F:Typedef<gpointer>->«void*» ( )*» func
	has Pointer                       $.data; # Typedef<gpointer>->«void*» data
	has gint                          $.joinable; # Typedef<gboolean>->«Typedef<gint>->«int»» joinable
	has int32                         $.priority; # Typedef<GThreadPriority>->«GThreadPriority» priority
}
class _GThreadFunctions is repr('CStruct') is export {
	has Pointer                       $.mutex_new; # F:Typedef<GMutex>->«Union»* ( )* mutex_new
	has Pointer                       $.mutex_lock; # F:void ( )* mutex_lock
	has Pointer                       $.mutex_trylock; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* mutex_trylock
	has Pointer                       $.mutex_unlock; # F:void ( )* mutex_unlock
	has Pointer                       $.mutex_free; # F:void ( )* mutex_free
	has Pointer                       $.cond_new; # F:Typedef<GCond>->«_GCond»* ( )* cond_new
	has Pointer                       $.cond_signal; # F:void ( )* cond_signal
	has Pointer                       $.cond_broadcast; # F:void ( )* cond_broadcast
	has Pointer                       $.cond_wait; # F:void ( )* cond_wait
	has Pointer                       $.cond_timed_wait; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* cond_timed_wait
	has Pointer                       $.cond_free; # F:void ( )* cond_free
	has Pointer                       $.private_new; # F:Typedef<GPrivate>->«_GPrivate»* ( )* private_new
	has Pointer                       $.private_get; # F:Typedef<gpointer>->«void*» ( )* private_get
	has Pointer                       $.private_set; # F:void ( )* private_set
	has Pointer                       $.thread_create; # F:void ( )* thread_create
	has Pointer                       $.thread_yield; # F:void ( )* thread_yield
	has Pointer                       $.thread_join; # F:void ( )* thread_join
	has Pointer                       $.thread_exit; # F:void ( )* thread_exit
	has Pointer                       $.thread_set_priority; # F:void ( )* thread_set_priority
	has Pointer                       $.thread_self; # F:void ( )* thread_self
	has Pointer                       $.thread_equal; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* thread_equal
}
class _GStaticRecMutex is repr('CStruct') is export {
	has                               $.mutex; # Typedef<GStaticMutex>->«» mutex
	has guint                         $.depth; # Typedef<guint>->«unsigned int» depth
	HAS                               $.unused; # Union unused
}
class _GStaticRWLock is repr('CStruct') is export {
	has                               $.mutex; # Typedef<GStaticMutex>->«» mutex
	has _GCond                        $.read_cond; # Typedef<GCond>->«_GCond»* read_cond
	has _GCond                        $.write_cond; # Typedef<GCond>->«_GCond»* write_cond
	has guint                         $.read_counter; # Typedef<guint>->«unsigned int» read_counter
	has gint                          $.have_writer; # Typedef<gboolean>->«Typedef<gint>->«int»» have_writer
	has guint                         $.want_to_read; # Typedef<guint>->«unsigned int» want_to_read
	has guint                         $.want_to_write; # Typedef<guint>->«unsigned int» want_to_write
}
class _GStaticPrivate is repr('CStruct') is export {
	has guint                         $.index; # Typedef<guint>->«unsigned int» index
}

# == /usr/include/glib-2.0/gio/gsocketaddressenumerator.h ==

class _GSocketAddressEnumerator is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
}
class _GSocketAddressEnumeratorClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.next; # F:Typedef<GSocketAddress>->«_GSocketAddress»* ( )* next
	has Pointer                       $.next_async; # F:void ( )* next_async
	has Pointer                       $.next_finish; # F:Typedef<GSocketAddress>->«_GSocketAddress»* ( )* next_finish
}

# == /usr/include/glib-2.0/gobject/gclosure.h ==

class _GClosureNotifyData is repr('CStruct') is export {
	has Pointer                       $.data; # Typedef<gpointer>->«void*» data
	has Pointer                       $.notify; # Typedef<GClosureNotify>->«F:void ( )*» notify
}
class _GClosure is repr('CStruct') is export {
	has guint                         $.ref_count; # const Typedef<guint>->«unsigned int» ref_count
	has guint                         $.meta_marshal_nouse; # const Typedef<guint>->«unsigned int» meta_marshal_nouse
	has guint                         $.n_guards; # const Typedef<guint>->«unsigned int» n_guards
	has guint                         $.n_fnotifiers; # const Typedef<guint>->«unsigned int» n_fnotifiers
	has guint                         $.n_inotifiers; # const Typedef<guint>->«unsigned int» n_inotifiers
	has guint                         $.in_inotify; # const Typedef<guint>->«unsigned int» in_inotify
	has guint                         $.floating; # const Typedef<guint>->«unsigned int» floating
	has guint                         $.derivative_flag; # const Typedef<guint>->«unsigned int» derivative_flag
	has guint                         $.in_marshal; # const Typedef<guint>->«unsigned int» in_marshal
	has guint                         $.is_invalid; # const Typedef<guint>->«unsigned int» is_invalid
	has Pointer                       $.marshal; # F:void ( )* marshal
	has Pointer                       $.data; # Typedef<gpointer>->«void*» data
	has _GClosureNotifyData           $.notifiers; # Typedef<GClosureNotifyData>->«_GClosureNotifyData»* notifiers
}
class _GCClosure is repr('CStruct') is export {
	has _GClosure                     $.closure; # Typedef<GClosure>->«_GClosure» closure
	has Pointer                       $.callback; # Typedef<gpointer>->«void*» callback
}

# == /usr/include/glib-2.0/glib/glist.h ==

class _GList is repr('CStruct') is export {
	has Pointer                       $.data; # Typedef<gpointer>->«void*» data
	has _GList                        $.next; # Typedef<GList>->«_GList»* next
	has _GList                        $.prev; # Typedef<GList>->«_GList»* prev
}

# == /usr/include/glib-2.0/gio/gsocketclient.h ==

class _GSocketClientPrivate is repr('CStruct') is export {
}
class _GSocketClientClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.event; # F:void ( )* event
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
}
class _GSocketClient is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GSocketClientPrivate         $.priv; # Typedef<GSocketClientPrivate>->«_GSocketClientPrivate»* priv
}

# == /usr/include/glib-2.0/gio/gsettings.h ==

class _GSettingsPrivate is repr('CStruct') is export {
}
class _GSettingsClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.writable_changed; # F:void ( )* writable_changed
	has Pointer                       $.changed; # F:void ( )* changed
	has Pointer                       $.writable_change_event; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* writable_change_event
	has Pointer                       $.change_event; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* change_event
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[20] padding
}
class _GSettings is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GSettingsPrivate             $.priv; # Typedef<GSettingsPrivate>->«_GSettingsPrivate»* priv
}

# == /usr/include/glib-2.0/glib/gtimezone.h ==

class _GTimeZone is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gcharsetconverter.h ==

class _GCharsetConverterClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
}

# == /usr/include/glib-2.0/gobject/gtypeplugin.h ==

class _GTypePluginClass is repr('CStruct') is export {
	has _GTypeInterface               $.base_iface; # Typedef<GTypeInterface>->«_GTypeInterface» base_iface
	has Pointer                       $.use_plugin; # Typedef<GTypePluginUse>->«F:void ( )*» use_plugin
	has Pointer                       $.unuse_plugin; # Typedef<GTypePluginUnuse>->«F:void ( )*» unuse_plugin
	has Pointer                       $.complete_type_info; # Typedef<GTypePluginCompleteTypeInfo>->«F:void ( )*» complete_type_info
	has Pointer                       $.complete_interface_info; # Typedef<GTypePluginCompleteInterfaceInfo>->«F:void ( )*» complete_interface_info
}

# == /usr/include/glib-2.0/gio/gconverteroutputstream.h ==

class _GConverterOutputStreamPrivate is repr('CStruct') is export {
}
class _GConverterOutputStream is repr('CStruct') is export {
	has _GFilterOutputStream          $.parent_instance; # Typedef<GFilterOutputStream>->«_GFilterOutputStream» parent_instance
	has _GConverterOutputStreamPrivate$.priv; # Typedef<GConverterOutputStreamPrivate>->«_GConverterOutputStreamPrivate»* priv
}
class _GConverterOutputStreamClass is repr('CStruct') is export {
	has _GFilterOutputStreamClass     $.parent_class; # Typedef<GFilterOutputStreamClass>->«_GFilterOutputStreamClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/gimp-2.0/libgimpcolor/gimpcolortypes.h ==

class _GimpColorManaged is repr('CStruct') is export {
}
class _GimpRGB is repr('CStruct') is export {
	has gdouble                       $.r; # Typedef<gdouble>->«double» r
	has gdouble                       $.g; # Typedef<gdouble>->«double» g
	has gdouble                       $.b; # Typedef<gdouble>->«double» b
	has gdouble                       $.a; # Typedef<gdouble>->«double» a
}
class _GimpHSV is repr('CStruct') is export {
	has gdouble                       $.h; # Typedef<gdouble>->«double» h
	has gdouble                       $.s; # Typedef<gdouble>->«double» s
	has gdouble                       $.v; # Typedef<gdouble>->«double» v
	has gdouble                       $.a; # Typedef<gdouble>->«double» a
}
class _GimpHSL is repr('CStruct') is export {
	has gdouble                       $.h; # Typedef<gdouble>->«double» h
	has gdouble                       $.s; # Typedef<gdouble>->«double» s
	has gdouble                       $.l; # Typedef<gdouble>->«double» l
	has gdouble                       $.a; # Typedef<gdouble>->«double» a
}
class _GimpCMYK is repr('CStruct') is export {
	has gdouble                       $.c; # Typedef<gdouble>->«double» c
	has gdouble                       $.m; # Typedef<gdouble>->«double» m
	has gdouble                       $.y; # Typedef<gdouble>->«double» y
	has gdouble                       $.k; # Typedef<gdouble>->«double» k
	has gdouble                       $.a; # Typedef<gdouble>->«double» a
}

# == /usr/include/glib-2.0/glib/grand.h ==

class _GRand is repr('CStruct') is export {
}

# == /usr/include/gimp-2.0/libgimpmath/gimpmathtypes.h ==

class _GimpMatrix2 is repr('CStruct') is export {
	has NYIRP6(Array with size)       $.coeff; # Typedef<gdouble>->«double»[2][2] coeff
}
class _GimpMatrix3 is repr('CStruct') is export {
	has NYIRP6(Array with size)       $.coeff; # Typedef<gdouble>->«double»[3][3] coeff
}
class _GimpMatrix4 is repr('CStruct') is export {
	has NYIRP6(Array with size)       $.coeff; # Typedef<gdouble>->«double»[4][4] coeff
}
class _GimpVector2 is repr('CStruct') is export {
	has gdouble                       $.x; # Typedef<gdouble>->«double» x
	has gdouble                       $.y; # Typedef<gdouble>->«double» y
}
class _GimpVector3 is repr('CStruct') is export {
	has gdouble                       $.x; # Typedef<gdouble>->«double» x
	has gdouble                       $.y; # Typedef<gdouble>->«double» y
	has gdouble                       $.z; # Typedef<gdouble>->«double» z
}
class _GimpVector4 is repr('CStruct') is export {
	has gdouble                       $.x; # Typedef<gdouble>->«double» x
	has gdouble                       $.y; # Typedef<gdouble>->«double» y
	has gdouble                       $.z; # Typedef<gdouble>->«double» z
	has gdouble                       $.w; # Typedef<gdouble>->«double» w
}

# == /usr/include/glib-2.0/gio/gvfs.h ==

class _GVfs is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
}
class _GVfsClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.is_active; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* is_active
	has Pointer                       $.get_file_for_path; # F:Typedef<GFile>->«_GFile»* ( )* get_file_for_path
	has Pointer                       $.get_file_for_uri; # F:Typedef<GFile>->«_GFile»* ( )* get_file_for_uri
	has Pointer                       $.get_supported_uri_schemes; # F:const const Typedef<gchar>->«char»** ( )* get_supported_uri_schemes
	has Pointer                       $.parse_name; # F:Typedef<GFile>->«_GFile»* ( )* parse_name
	has Pointer                       $.local_file_add_info; # F:void ( )* local_file_add_info
	has Pointer                       $.add_writable_namespaces; # F:void ( )* add_writable_namespaces
	has Pointer                       $.local_file_set_attributes; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* local_file_set_attributes
	has Pointer                       $.local_file_removed; # F:void ( )* local_file_removed
	has Pointer                       $.local_file_moved; # F:void ( )* local_file_moved
	has Pointer                       $.deserialize_icon; # F:Typedef<GIcon>->«_GIcon»* ( )* deserialize_icon
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
	has Pointer                       $._g_reserved6; # F:void ( )* _g_reserved6
}

# == /usr/include/glib-2.0/gio/gsocketconnectable.h ==

class _GSocketConnectableIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.enumerate; # F:Typedef<GSocketAddressEnumerator>->«_GSocketAddressEnumerator»* ( )* enumerate
	has Pointer                       $.proxy_enumerate; # F:Typedef<GSocketAddressEnumerator>->«_GSocketAddressEnumerator»* ( )* proxy_enumerate
	has Pointer                       $.to_string; # F:Typedef<gchar>->«char»* ( )* to_string
}

# == /usr/include/glib-2.0/gio/gfilterinputstream.h ==

class _GFilterInputStream is repr('CStruct') is export {
	has _GInputStream                 $.parent_instance; # Typedef<GInputStream>->«_GInputStream» parent_instance
	has _GInputStream                 $.base_stream; # Typedef<GInputStream>->«_GInputStream»* base_stream
}
class _GFilterInputStreamClass is repr('CStruct') is export {
	has _GInputStreamClass            $.parent_class; # Typedef<GInputStreamClass>->«_GInputStreamClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
}

# == /usr/include/glib-2.0/gio/gsimpleasyncresult.h ==

class _GSimpleAsyncResultClass is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gliststore.h ==

class _GListStore is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gobject/gtype.h ==

class _GTypeCValue is repr('CUnion') is export {
}
class _GTypePlugin is repr('CStruct') is export {
}
class _GTypeClass is repr('CStruct') is export {
	has gsize                         $.g_type; # Typedef<GType>->«Typedef<gsize>->«long unsigned int»» g_type
}
class _GTypeInstance is repr('CStruct') is export {
	has _GTypeClass                   $.g_class; # Typedef<GTypeClass>->«_GTypeClass»* g_class
}
class _GTypeInterface is repr('CStruct') is export {
	has gsize                         $.g_type; # Typedef<GType>->«Typedef<gsize>->«long unsigned int»» g_type
	has gsize                         $.g_instance_type; # Typedef<GType>->«Typedef<gsize>->«long unsigned int»» g_instance_type
}
class _GTypeQuery is repr('CStruct') is export {
	has gsize                         $.type; # Typedef<GType>->«Typedef<gsize>->«long unsigned int»» type
	has Pointer[gchar]                $.type_name; # const Typedef<gchar>->«char»* type_name
	has guint                         $.class_size; # Typedef<guint>->«unsigned int» class_size
	has guint                         $.instance_size; # Typedef<guint>->«unsigned int» instance_size
}
class _GTypeInfo is repr('CStruct') is export {
	has guint16                       $.class_size; # Typedef<guint16>->«short unsigned int» class_size
	has Pointer                       $.base_init; # Typedef<GBaseInitFunc>->«F:void ( )*» base_init
	has Pointer                       $.base_finalize; # Typedef<GBaseFinalizeFunc>->«F:void ( )*» base_finalize
	has Pointer                       $.class_init; # Typedef<GClassInitFunc>->«F:void ( )*» class_init
	has Pointer                       $.class_finalize; # Typedef<GClassFinalizeFunc>->«F:void ( )*» class_finalize
	has Pointer                       $.class_data; # Typedef<gconstpointer>->«const void*» class_data
	has guint16                       $.instance_size; # Typedef<guint16>->«short unsigned int» instance_size
	has guint16                       $.n_preallocs; # Typedef<guint16>->«short unsigned int» n_preallocs
	has Pointer                       $.instance_init; # Typedef<GInstanceInitFunc>->«F:void ( )*» instance_init
	has _GTypeValueTable              $.value_table; # const Typedef<GTypeValueTable>->«_GTypeValueTable»* value_table
}
class _GTypeFundamentalInfo is repr('CStruct') is export {
	has int32                         $.type_flags; # Typedef<GTypeFundamentalFlags>->«GTypeFundamentalFlags» type_flags
}
class _GInterfaceInfo is repr('CStruct') is export {
	has Pointer                       $.interface_init; # Typedef<GInterfaceInitFunc>->«F:void ( )*» interface_init
	has Pointer                       $.interface_finalize; # Typedef<GInterfaceFinalizeFunc>->«F:void ( )*» interface_finalize
	has Pointer                       $.interface_data; # Typedef<gpointer>->«void*» interface_data
}
class _GTypeValueTable is repr('CStruct') is export {
	has Pointer                       $.value_init; # F:void ( )* value_init
	has Pointer                       $.value_free; # F:void ( )* value_free
	has Pointer                       $.value_copy; # F:void ( )* value_copy
	has Pointer                       $.value_peek_pointer; # F:Typedef<gpointer>->«void*» ( )* value_peek_pointer
	has Pointer[gchar]                $.collect_format; # const Typedef<gchar>->«char»* collect_format
	has Pointer                       $.collect_value; # F:Typedef<gchar>->«char»* ( )* collect_value
	has Pointer[gchar]                $.lcopy_format; # const Typedef<gchar>->«char»* lcopy_format
	has Pointer                       $.lcopy_value; # F:Typedef<gchar>->«char»* ( )* lcopy_value
}

# == /usr/include/glib-2.0/gio/gproxyaddressenumerator.h ==

class _GProxyAddressEnumeratorPrivate is repr('CStruct') is export {
}
class _GProxyAddressEnumerator is repr('CStruct') is export {
	has _GSocketAddressEnumerator     $.parent_instance; # Typedef<GSocketAddressEnumerator>->«_GSocketAddressEnumerator» parent_instance
	has _GProxyAddressEnumeratorPrivate$.priv; # Typedef<GProxyAddressEnumeratorPrivate>->«_GProxyAddressEnumeratorPrivate»* priv
}
class _GProxyAddressEnumeratorClass is repr('CStruct') is export {
	has _GSocketAddressEnumeratorClass$.parent_class; # Typedef<GSocketAddressEnumeratorClass>->«_GSocketAddressEnumeratorClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
	has Pointer                       $._g_reserved6; # F:void ( )* _g_reserved6
	has Pointer                       $._g_reserved7; # F:void ( )* _g_reserved7
}

# == /usr/include/glib-2.0/gio/gsettingsschema.h ==

class _GSettingsSchemaSource is repr('CStruct') is export {
}
class _GSettingsSchema is repr('CStruct') is export {
}
class _GSettingsSchemaKey is repr('CStruct') is export {
}

# == /usr/include/gegl-0.4/gegl-color.h ==

class _GeglColorPrivate is repr('CStruct') is export {
}
class _GeglColor is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GeglColorPrivate             $.priv; # Typedef<GeglColorPrivate>->«_GeglColorPrivate»* priv
}
class _GeglColorClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
}

# == /usr/include/gimp-2.0/libgimpbase/gimpvaluearray.h ==

class _GimpParamSpecValueArray is repr('CStruct') is export {
	has _GParamSpec                   $.parent_instance; # Typedef<GParamSpec>->«_GParamSpec» parent_instance
	has _GParamSpec                   $.element_spec; # Typedef<GParamSpec>->«_GParamSpec»* element_spec
	has gint                          $.fixed_n_elements; # Typedef<gint>->«int» fixed_n_elements
}

# == /usr/include/glib-2.0/gio/gfilteroutputstream.h ==

class _GFilterOutputStream is repr('CStruct') is export {
	has _GOutputStream                $.parent_instance; # Typedef<GOutputStream>->«_GOutputStream» parent_instance
	has _GOutputStream                $.base_stream; # Typedef<GOutputStream>->«_GOutputStream»* base_stream
}
class _GFilterOutputStreamClass is repr('CStruct') is export {
	has _GOutputStreamClass           $.parent_class; # Typedef<GOutputStreamClass>->«_GOutputStreamClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
}

# == /usr/include/glib-2.0/gio/gdtlsserverconnection.h ==

class _GDtlsServerConnectionInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
}

# == /usr/include/glib-2.0/gio/gtcpwrapperconnection.h ==

class _GTcpWrapperConnectionPrivate is repr('CStruct') is export {
}
class _GTcpWrapperConnectionClass is repr('CStruct') is export {
	has _GTcpConnectionClass          $.parent_class; # Typedef<GTcpConnectionClass>->«_GTcpConnectionClass» parent_class
}
class _GTcpWrapperConnection is repr('CStruct') is export {
	has _GTcpConnection               $.parent_instance; # Typedef<GTcpConnection>->«_GTcpConnection» parent_instance
	has _GTcpWrapperConnectionPrivate $.priv; # Typedef<GTcpWrapperConnectionPrivate>->«_GTcpWrapperConnectionPrivate»* priv
}

# == /usr/include/glib-2.0/gio/gtlsdatabase.h ==

class _GTlsDatabasePrivate is repr('CStruct') is export {
}
class _GTlsDatabase is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GTlsDatabasePrivate          $.priv; # Typedef<GTlsDatabasePrivate>->«_GTlsDatabasePrivate»* priv
}
class _GTlsDatabaseClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.verify_chain; # F:Typedef<GTlsCertificateFlags>->«GTlsCertificateFlags» ( )* verify_chain
	has Pointer                       $.verify_chain_async; # F:void ( )* verify_chain_async
	has Pointer                       $.verify_chain_finish; # F:Typedef<GTlsCertificateFlags>->«GTlsCertificateFlags» ( )* verify_chain_finish
	has Pointer                       $.create_certificate_handle; # F:Typedef<gchar>->«char»* ( )* create_certificate_handle
	has Pointer                       $.lookup_certificate_for_handle; # F:Typedef<GTlsCertificate>->«_GTlsCertificate»* ( )* lookup_certificate_for_handle
	has Pointer                       $.lookup_certificate_for_handle_async; # F:void ( )* lookup_certificate_for_handle_async
	has Pointer                       $.lookup_certificate_for_handle_finish; # F:Typedef<GTlsCertificate>->«_GTlsCertificate»* ( )* lookup_certificate_for_handle_finish
	has Pointer                       $.lookup_certificate_issuer; # F:Typedef<GTlsCertificate>->«_GTlsCertificate»* ( )* lookup_certificate_issuer
	has Pointer                       $.lookup_certificate_issuer_async; # F:void ( )* lookup_certificate_issuer_async
	has Pointer                       $.lookup_certificate_issuer_finish; # F:Typedef<GTlsCertificate>->«_GTlsCertificate»* ( )* lookup_certificate_issuer_finish
	has Pointer                       $.lookup_certificates_issued_by; # F:Typedef<GList>->«_GList»* ( )* lookup_certificates_issued_by
	has Pointer                       $.lookup_certificates_issued_by_async; # F:void ( )* lookup_certificates_issued_by_async
	has Pointer                       $.lookup_certificates_issued_by_finish; # F:Typedef<GList>->«_GList»* ( )* lookup_certificates_issued_by_finish
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[16] padding
}

# == /usr/include/glib-2.0/gio/gconverter.h ==

class _GConverterIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.convert; # F:Typedef<GConverterResult>->«GConverterResult» ( )* convert
	has Pointer                       $.reset; # F:void ( )* reset
}

# == /usr/include/glib-2.0/gio/gsocket.h ==

class _GSocketPrivate is repr('CStruct') is export {
}
class _GSocketClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
	has Pointer                       $._g_reserved6; # F:void ( )* _g_reserved6
	has Pointer                       $._g_reserved7; # F:void ( )* _g_reserved7
	has Pointer                       $._g_reserved8; # F:void ( )* _g_reserved8
	has Pointer                       $._g_reserved9; # F:void ( )* _g_reserved9
	has Pointer                       $._g_reserved10; # F:void ( )* _g_reserved10
}
class _GSocket is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GSocketPrivate               $.priv; # Typedef<GSocketPrivate>->«_GSocketPrivate»* priv
}

# == /usr/include/glib-2.0/gio/gnativevolumemonitor.h ==

class _GNativeVolumeMonitor is repr('CStruct') is export {
	has _GVolumeMonitor               $.parent_instance; # Typedef<GVolumeMonitor>->«_GVolumeMonitor» parent_instance
}
class _GNativeVolumeMonitorClass is repr('CStruct') is export {
	has _GVolumeMonitorClass          $.parent_class; # Typedef<GVolumeMonitorClass>->«_GVolumeMonitorClass» parent_class
	has Pointer                       $.get_mount_for_mount_path; # F:Typedef<GMount>->«_GMount»* ( )* get_mount_for_mount_path
}

# == /usr/include/glib-2.0/gio/ginitable.h ==

class _GInitableIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.init; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* init
}

# == /usr/include/glib-2.0/gio/gappinfo.h ==

class _GAppLaunchContextPrivate is repr('CStruct') is export {
}
class _GAppInfoIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.dup; # F:Typedef<GAppInfo>->«_GAppInfo»* ( )* dup
	has Pointer                       $.equal; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* equal
	has Pointer                       $.get_id; # F:const char* ( )* get_id
	has Pointer                       $.get_name; # F:const char* ( )* get_name
	has Pointer                       $.get_description; # F:const char* ( )* get_description
	has Pointer                       $.get_executable; # F:const char* ( )* get_executable
	has Pointer                       $.get_icon; # F:Typedef<GIcon>->«_GIcon»* ( )* get_icon
	has Pointer                       $.launch; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* launch
	has Pointer                       $.supports_uris; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* supports_uris
	has Pointer                       $.supports_files; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* supports_files
	has Pointer                       $.launch_uris; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* launch_uris
	has Pointer                       $.should_show; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* should_show
	has Pointer                       $.set_as_default_for_type; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* set_as_default_for_type
	has Pointer                       $.set_as_default_for_extension; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* set_as_default_for_extension
	has Pointer                       $.add_supports_type; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* add_supports_type
	has Pointer                       $.can_remove_supports_type; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_remove_supports_type
	has Pointer                       $.remove_supports_type; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* remove_supports_type
	has Pointer                       $.can_delete; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_delete
	has Pointer                       $.do_delete; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* do_delete
	has Pointer                       $.get_commandline; # F:const char* ( )* get_commandline
	has Pointer                       $.get_display_name; # F:const char* ( )* get_display_name
	has Pointer                       $.set_as_last_used_for_type; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* set_as_last_used_for_type
	has Pointer                       $.get_supported_types; # F:const char** ( )* get_supported_types
	has Pointer                       $.launch_uris_async; # F:void ( )* launch_uris_async
	has Pointer                       $.launch_uris_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* launch_uris_finish
}
class _GAppLaunchContext is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GAppLaunchContextPrivate     $.priv; # Typedef<GAppLaunchContextPrivate>->«_GAppLaunchContextPrivate»* priv
}
class _GAppLaunchContextClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.get_display; # F:char* ( )* get_display
	has Pointer                       $.get_startup_notify_id; # F:char* ( )* get_startup_notify_id
	has Pointer                       $.launch_failed; # F:void ( )* launch_failed
	has Pointer                       $.launched; # F:void ( )* launched
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
}
class _GAppInfoMonitor is repr('CStruct') is export {
}

# == /usr/include/gimp-2.0/libgimpbase/gimpdatafiles.h ==

class _GimpDatafileData is repr('CStruct') is export {
	has Pointer[gchar]                $.filename; # const Typedef<gchar>->«char»* filename
	has Pointer[gchar]                $.dirname; # const Typedef<gchar>->«char»* dirname
	has Pointer[gchar]                $.basename; # const Typedef<gchar>->«char»* basename
	has __time_t                      $.atime; # Typedef<time_t>->«Typedef<__time_t>->«long int»» atime
	has __time_t                      $.mtime; # Typedef<time_t>->«Typedef<__time_t>->«long int»» mtime
	has __time_t                      $.ctime; # Typedef<time_t>->«Typedef<__time_t>->«long int»» ctime
}

# == /usr/include/gimp-2.0/libgimp/gimpprogress.h ==

class _GimpProgressVtable is repr('CStruct') is export {
	has Pointer                       $.start; # F:void ( )* start
	has Pointer                       $.end; # F:void ( )* end
	has Pointer                       $.set_text; # F:void ( )* set_text
	has Pointer                       $.set_value; # F:void ( )* set_value
	has Pointer                       $.pulse; # F:void ( )* pulse
	has Pointer                       $.get_window; # F:Typedef<guint32>->«unsigned int» ( )* get_window
	has Pointer                       $._gimp_reserved1; # F:void ( )* _gimp_reserved1
	has Pointer                       $._gimp_reserved2; # F:void ( )* _gimp_reserved2
	has Pointer                       $._gimp_reserved3; # F:void ( )* _gimp_reserved3
	has Pointer                       $._gimp_reserved4; # F:void ( )* _gimp_reserved4
	has Pointer                       $._gimp_reserved5; # F:void ( )* _gimp_reserved5
	has Pointer                       $._gimp_reserved6; # F:void ( )* _gimp_reserved6
	has Pointer                       $._gimp_reserved7; # F:void ( )* _gimp_reserved7
	has Pointer                       $._gimp_reserved8; # F:void ( )* _gimp_reserved8
}

# == /usr/include/glib-2.0/gobject/gsignal.h ==

class _GSignalInvocationHint is repr('CStruct') is export {
	has guint                         $.signal_id; # Typedef<guint>->«unsigned int» signal_id
	has guint32                       $.detail; # Typedef<GQuark>->«Typedef<guint32>->«unsigned int»» detail
	has int32                         $.run_type; # Typedef<GSignalFlags>->«GSignalFlags» run_type
}
class _GSignalQuery is repr('CStruct') is export {
	has guint                         $.signal_id; # Typedef<guint>->«unsigned int» signal_id
	has Pointer[gchar]                $.signal_name; # const Typedef<gchar>->«char»* signal_name
	has gsize                         $.itype; # Typedef<GType>->«Typedef<gsize>->«long unsigned int»» itype
	has int32                         $.signal_flags; # Typedef<GSignalFlags>->«GSignalFlags» signal_flags
	has gsize                         $.return_type; # Typedef<GType>->«Typedef<gsize>->«long unsigned int»» return_type
	has guint                         $.n_params; # Typedef<guint>->«unsigned int» n_params
	has Pointer[gsize]                $.param_types; # const Typedef<GType>->«Typedef<gsize>->«long unsigned int»»* param_types
}

# == /usr/include/glib-2.0/gio/giostream.h ==

class _GIOStreamPrivate is repr('CStruct') is export {
}
class _GIOStream is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GIOStreamPrivate             $.priv; # Typedef<GIOStreamPrivate>->«_GIOStreamPrivate»* priv
}
class _GIOStreamClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.get_input_stream; # F:Typedef<GInputStream>->«_GInputStream»* ( )* get_input_stream
	has Pointer                       $.get_output_stream; # F:Typedef<GOutputStream>->«_GOutputStream»* ( )* get_output_stream
	has Pointer                       $.close_fn; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* close_fn
	has Pointer                       $.close_async; # F:void ( )* close_async
	has Pointer                       $.close_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* close_finish
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
	has Pointer                       $._g_reserved6; # F:void ( )* _g_reserved6
	has Pointer                       $._g_reserved7; # F:void ( )* _g_reserved7
	has Pointer                       $._g_reserved8; # F:void ( )* _g_reserved8
	has Pointer                       $._g_reserved9; # F:void ( )* _g_reserved9
	has Pointer                       $._g_reserved10; # F:void ( )* _g_reserved10
}

# == /usr/include/dirent.h ==

class __dirstream is repr('CStruct') is export {
}

# == /usr/include/glib-2.0/gio/gtlsclientconnection.h ==

class _GTlsClientConnectionInterface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.copy_session_state; # F:void ( )* copy_session_state
}

# == /usr/include/glib-2.0/gio/gfileiostream.h ==

class _GFileIOStreamPrivate is repr('CStruct') is export {
}
class _GFileIOStream is repr('CStruct') is export {
	has _GIOStream                    $.parent_instance; # Typedef<GIOStream>->«_GIOStream» parent_instance
	has _GFileIOStreamPrivate         $.priv; # Typedef<GFileIOStreamPrivate>->«_GFileIOStreamPrivate»* priv
}
class _GFileIOStreamClass is repr('CStruct') is export {
	has _GIOStreamClass               $.parent_class; # Typedef<GIOStreamClass>->«_GIOStreamClass» parent_class
	has Pointer                       $.tell; # F:Typedef<goffset>->«Typedef<gint64>->«long int»» ( )* tell
	has Pointer                       $.can_seek; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_seek
	has Pointer                       $.seek; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* seek
	has Pointer                       $.can_truncate; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_truncate
	has Pointer                       $.truncate_fn; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* truncate_fn
	has Pointer                       $.query_info; # F:Typedef<GFileInfo>->«_GFileInfo»* ( )* query_info
	has Pointer                       $.query_info_async; # F:void ( )* query_info_async
	has Pointer                       $.query_info_finish; # F:Typedef<GFileInfo>->«_GFileInfo»* ( )* query_info_finish
	has Pointer                       $.get_etag; # F:char* ( )* get_etag
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}

# == /usr/include/glib-2.0/gio/gtlscertificate.h ==

class _GTlsCertificatePrivate is repr('CStruct') is export {
}
class _GTlsCertificate is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GTlsCertificatePrivate       $.priv; # Typedef<GTlsCertificatePrivate>->«_GTlsCertificatePrivate»* priv
}
class _GTlsCertificateClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.verify; # F:Typedef<GTlsCertificateFlags>->«GTlsCertificateFlags» ( )* verify
	has NYIRP6(Array with size)       $.padding; # Typedef<gpointer>->«void*»[8] padding
}

# == /usr/include/glib-2.0/gio/gdrive.h ==

class _GDriveIface is repr('CStruct') is export {
	has _GTypeInterface               $.g_iface; # Typedef<GTypeInterface>->«_GTypeInterface» g_iface
	has Pointer                       $.changed; # F:void ( )* changed
	has Pointer                       $.disconnected; # F:void ( )* disconnected
	has Pointer                       $.eject_button; # F:void ( )* eject_button
	has Pointer                       $.get_name; # F:char* ( )* get_name
	has Pointer                       $.get_icon; # F:Typedef<GIcon>->«_GIcon»* ( )* get_icon
	has Pointer                       $.has_volumes; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* has_volumes
	has Pointer                       $.get_volumes; # F:Typedef<GList>->«_GList»* ( )* get_volumes
	has Pointer                       $.is_media_removable; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* is_media_removable
	has Pointer                       $.has_media; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* has_media
	has Pointer                       $.is_media_check_automatic; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* is_media_check_automatic
	has Pointer                       $.can_eject; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_eject
	has Pointer                       $.can_poll_for_media; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_poll_for_media
	has Pointer                       $.eject; # F:void ( )* eject
	has Pointer                       $.eject_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* eject_finish
	has Pointer                       $.poll_for_media; # F:void ( )* poll_for_media
	has Pointer                       $.poll_for_media_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* poll_for_media_finish
	has Pointer                       $.get_identifier; # F:char* ( )* get_identifier
	has Pointer                       $.enumerate_identifiers; # F:char** ( )* enumerate_identifiers
	has Pointer                       $.get_start_stop_type; # F:Typedef<GDriveStartStopType>->«GDriveStartStopType» ( )* get_start_stop_type
	has Pointer                       $.can_start; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_start
	has Pointer                       $.can_start_degraded; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_start_degraded
	has Pointer                       $.start; # F:void ( )* start
	has Pointer                       $.start_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* start_finish
	has Pointer                       $.can_stop; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* can_stop
	has Pointer                       $.stop; # F:void ( )* stop
	has Pointer                       $.stop_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* stop_finish
	has Pointer                       $.stop_button; # F:void ( )* stop_button
	has Pointer                       $.eject_with_operation; # F:void ( )* eject_with_operation
	has Pointer                       $.eject_with_operation_finish; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* eject_with_operation_finish
	has Pointer                       $.get_sort_key; # F:const Typedef<gchar>->«char»* ( )* get_sort_key
	has Pointer                       $.get_symbolic_icon; # F:Typedef<GIcon>->«_GIcon»* ( )* get_symbolic_icon
	has Pointer                       $.is_removable; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* is_removable
}

# == /usr/include/glib-2.0/gio/gfilemonitor.h ==

class _GFileMonitorPrivate is repr('CStruct') is export {
}
class _GFileMonitor is repr('CStruct') is export {
	has _GObject                      $.parent_instance; # Typedef<GObject>->«_GObject» parent_instance
	has _GFileMonitorPrivate          $.priv; # Typedef<GFileMonitorPrivate>->«_GFileMonitorPrivate»* priv
}
class _GFileMonitorClass is repr('CStruct') is export {
	has _GObjectClass                 $.parent_class; # Typedef<GObjectClass>->«_GObjectClass» parent_class
	has Pointer                       $.changed; # F:void ( )* changed
	has Pointer                       $.cancel; # F:Typedef<gboolean>->«Typedef<gint>->«int»» ( )* cancel
	has Pointer                       $._g_reserved1; # F:void ( )* _g_reserved1
	has Pointer                       $._g_reserved2; # F:void ( )* _g_reserved2
	has Pointer                       $._g_reserved3; # F:void ( )* _g_reserved3
	has Pointer                       $._g_reserved4; # F:void ( )* _g_reserved4
	has Pointer                       $._g_reserved5; # F:void ( )* _g_reserved5
}
